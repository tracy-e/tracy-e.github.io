<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Esoft Mobile</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://esoftmobile.com/"/>
  <updated>2017-03-06T09:31:38.000Z</updated>
  <id>http://esoftmobile.com/</id>
  
  <author>
    <name>Tracy Yih</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flask源码解析：简介</title>
    <link href="http://esoftmobile.com/2017/03/06/flask-into/"/>
    <id>http://esoftmobile.com/2017/03/06/flask-into/</id>
    <published>2017-03-06T09:14:12.000Z</published>
    <updated>2017-03-06T09:31:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Flask-简介"><a href="#Flask-简介" class="headerlink" title="Flask 简介"></a>Flask 简介</h2><p>Flask 官网上对它的定位是一个“微” python web 开发框架。</p>
<blockquote>
<p>Flask is a micro web development framework for Python.</p>
</blockquote>
<p>python 语言 web 框架很多：Django、Tornado、webpy、bottle……，flask 的特点是简单可扩展。简单有几个方面，比如它只实现 web 框架最核心的功能，保持功能的简洁；还有一个就是代码量少，核心代码 <code>app.py</code> 文件只有 2k+ 行。可扩展就是允许第三方插件来扩充功能，比如数据库可以使用 <code>Flask-SQLAlchemy</code>，缓存可以使用 <code>Flask-Cache</code> 等等。</p>
<a id="more"></a>
<p>下面这段代码是 flask 官方文档给出的 hello world 版本的 flask 应用：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</div><div class="line">app = Flask(__name__)</div><div class="line"></div><div class="line"><span class="meta">@app.route('/')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'Hello, World!'</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    app.run()</div></pre></td></tr></table></figure></p>
<p>要理解 flask 的源码，必须有一定的 python 基础（对 decorator、magic method、iterator、generator 概念比较熟悉），不然的话，会有些吃力。另外一个必须理解的概念是 WSGI，简单来说就是一套 web server 和 web 框架/web 应用之间的协议。可以阅读我之前写的 python wsgi 简介 和翻译的 什么是 web 框架 ，或者自行搜索相关资料，熟悉这部分的内容。</p>
<p><em>NOTE：本系列文章分析的 flask 版本号是 0.12，其他版本可能会有出入。</em></p>
<h2 id="两个依赖"><a href="#两个依赖" class="headerlink" title="两个依赖"></a>两个依赖</h2><p>flask 有两个核心依赖库：<code>werkzeug</code> 和 <code>jinja</code>，而 <code>werkzeug</code> 又是两者中更核心的。</p>
<p><code>werkzeug</code> 负责核心的逻辑模块，比如路由、请求和应答的封装、WSGI 相关的函数等；<code>jinja</code> 负责模板的渲染，主要用来渲染返回给用户的 html 文件内容。</p>
<p>模板（template）是和 web 框架相对独立的内容，比如 jinja 不是只能用在 web 应用中，而 web 应用也可以不处理模板（比如返回 raw text 或者 json/xml 结构数据，而不是 html 页面）。<code>flask</code> 直接使用 <code>jinja2</code> 而不是把这部分也做成可扩展的看起来有悖它的设计原则，我个人的理解是：<code>flask</code> 是个写网页的 web 框架，不像 <code>flask-restful</code> 可以专门做 <code>json/xml</code> 数据接口，必须提供模板功能，不然用户就无法使用。而如果不绑定一个模板库的话，有三种方法：自己写一个模板引擎、封装一个可扩展的模板层，用户可以自己选择具体的模板引擎、或者让用户自己处理模板。但是这些方法要么增加实现的复杂度，要么增加了使用的复杂度。</p>
<h3 id="werkzeug"><a href="#werkzeug" class="headerlink" title="werkzeug"></a>werkzeug</h3><p><code>werkzeug</code> 的定位并不是一个 web 框架，而是 HTTP 和 WSGI 相关的工具集，可以用来编写 web 框架，也可以直接使用它提供的一些帮助函数。</p>
<blockquote>
<p>Werkzeug is an HTTP and WSGI utility library for Python.</p>
</blockquote>
<p><code>werkzeug</code> 提供了 python web WSGI 开发相关的功能：<br>    •    路由处理：怎么根据请求中的 url 找到它的处理函数<br>    •    request 和 response 封装：可以更好地读取 request 的数据，也容易生成响应<br>    •    一个自带的 WSGI server，可以用来测试环境运行自己的应用</p>
<p>比如，我们可以使用 <code>werkzeug</code> 编写一个简单的 hello world 的 WSGI app：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> werkzeug.wrappers <span class="keyword">import</span> Request, Response</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">application</span><span class="params">(environ, start_response)</span>:</span></div><div class="line">    request = Request(environ)</div><div class="line">    text = <span class="string">'Hello %s!'</span> % request.args.get(<span class="string">'name'</span>, <span class="string">'World'</span>)</div><div class="line">    response = Response(text, mimetype=<span class="string">'text/plain'</span>)</div><div class="line">    <span class="keyword">return</span> response(environ, start_response)</div></pre></td></tr></table></figure>
<p>除了和 web WSGI 相关的功能，<code>werkzeug</code> 还实现了很多非常有用的数据结构和函数。比如用来处理一个 key 对应多个值的 <code>MultiDict</code>，不支持修改的字典 <code>ImmutableDict</code> ，可以缓存类属性的 <code>cache_property</code> 等等。如果有机会，可以写篇文章讲讲 <code>werkzeug</code> 的源码（好吧，我又挖坑了）。</p>
<h3 id="Jinja2"><a href="#Jinja2" class="headerlink" title="Jinja2"></a>Jinja2</h3><p>官网上，对 <code>Jinja</code> 的 介绍已经很清晰，它就是一个 python 实现的模板引擎，功能非常丰富。</p>
<blockquote>
<p>Jinja2 is a full featured template engine for Python. It has full unicode support, an optional integrated sandboxed execution environment, widely used and BSD licensed.</p>
</blockquote>
<p><code>Jinja</code> 功能比较丰富，支持 unicode 解析、自动 HTML escape 防止 XSS 攻击、继承、变量、过滤器、流程逻辑支持、python 代码逻辑集成等等。具体的功能和使用请参考官网的文档，这里就不介绍了。</p>
<h2 id="如何读代码"><a href="#如何读代码" class="headerlink" title="如何读代码"></a>如何读代码</h2><p>阅读源代码是件耗时而又没有直接产出的事情，所以必须要事先明确目的，不然会白白浪费时间。对于我来说，一般需要阅读源码有几个可能的原因：</p>
<ol>
<li><p>在学习语言的时候遇到瓶颈，想借鉴和学习优秀项目的风格、思路、经验等。比如在刚学习一门语言的语法之后，会发现自己还是不能很好地使用它。这个时候，我一般会找一个项目来练手，然后阅读一些优秀项目的代码来参考它们的实现</p>
</li>
<li><p>工作中需要经常用到某个项目。比如你从事 web 开发， 经常使用 flask/Django 框架，熟悉它们的源码可以让你在使用的时候更能得心应手和有的放矢，而且遇到问题之后也能更容易去定位</p>
</li>
<li><p>自己想深入理解某个领域的知识。对某个领域非常感兴趣，想理解它的内部实现原理，或者干脆自己想造个轮子，那么阅读源码是很好的途径</p>
</li>
</ol>
<p>知道了自己要阅读代码，那么怎么去读代码呢？</p>
<ol>
<li><p>最重要的是不要畏惧！记得我刚开始工作的时候，总觉得那些项目都是非常优秀的人编写的高质量代码，自己可望不可即，还没有深入之前就认为自己肯定看不懂，更不用去修改代码了。但其实，只要是人写的代码就会有 bug，也会有可以改进的地方，要有好的心态：欣赏好的代码设计，但也要学会识别不好的代码</p>
</li>
<li><p>不要巨细无遗！阅读代码最怕的是在细节中纠缠不清，不仅拖慢进度也会大挫信心。所有的代码大概都是树形的结构，开始最重要的是理清树干的结构，知道这个树大概有几个部分，分别负责什么功能，它们之间的大概关系是啥就够了。万万不可取的是盯着某个小树叶研究半天，或者被藤蔓遮住了视线</p>
</li>
<li><p>带着问题去阅读！这个建议不仅适用于代码，也适用于所有的阅读。如果在阅读之前有了明确的目的，比如想知道程序是怎么启动的、某个 bug 是什么时候引入的、某个功能是怎么实现的…… 带着这些问题，目的性强，理解也更快</p>
</li>
<li><p>简化再简化！如果代码的量级比较大，要学会简化问题，找到代码的核心。有几种方法：忽略细节，比如你知道某个文件夹是不同的驱动，那么只要理解它们的接口和大致功能就行，把细节当做黑盒；运行最简单的代码，通过一个 hello world 或者 quickstart 提供的例子作为入口和理解单位；找到之前的版本，有了版本控制和网络，很多项目很容易找到历史版本，比如理解 linux 的话很多书会推荐 0.X 的版本，它的核心都在，理解也更方便</p>
</li>
<li><p>双管齐下！理解一个很大项目无外乎两种方法——从上到下和从下到上。对于比较复杂的项目，灵活使用这两种方法，从上到下容易找到脉络，但有时候因为多态或者运行时加载的原因很难往下跟踪；从下到上掌握东西更牢固，更有针对性，但会看不清项目的全貌，不容理解整体。两种方法同时使用，直到它们出现交汇，做到融会贯通</p>
</li>
</ol>
<p>希望说了这么多，能对大家以后读代码和工作有点帮助。那么，从下一篇文章，我们就正式开始 flask 源码之旅了！</p>
<p><em>本文转自<a href="http://cizixs.com/2017/01/10/flask-insight-introduction" target="_blank" rel="external">Cizixs Writes Here</a></em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Flask-简介&quot;&gt;&lt;a href=&quot;#Flask-简介&quot; class=&quot;headerlink&quot; title=&quot;Flask 简介&quot;&gt;&lt;/a&gt;Flask 简介&lt;/h2&gt;&lt;p&gt;Flask 官网上对它的定位是一个“微” python web 开发框架。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Flask is a micro web development framework for Python.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;python 语言 web 框架很多：Django、Tornado、webpy、bottle……，flask 的特点是简单可扩展。简单有几个方面，比如它只实现 web 框架最核心的功能，保持功能的简洁；还有一个就是代码量少，核心代码 &lt;code&gt;app.py&lt;/code&gt; 文件只有 2k+ 行。可扩展就是允许第三方插件来扩充功能，比如数据库可以使用 &lt;code&gt;Flask-SQLAlchemy&lt;/code&gt;，缓存可以使用 &lt;code&gt;Flask-Cache&lt;/code&gt; 等等。&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://esoftmobile.com/tags/python/"/>
    
      <category term="Flask" scheme="http://esoftmobile.com/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>iOS设备MDM开发流程证书相关</title>
    <link href="http://esoftmobile.com/2015/03/23/ios-devices-mdm/"/>
    <id>http://esoftmobile.com/2015/03/23/ios-devices-mdm/</id>
    <published>2015-03-23T10:08:34.000Z</published>
    <updated>2015-07-10T02:48:39.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="申请Vendor"><a href="#申请Vendor" class="headerlink" title="申请Vendor"></a>申请Vendor</h2><h3 id="申请成为MDM-Vendor"><a href="#申请成为MDM-Vendor" class="headerlink" title="申请成为MDM Vendor"></a>申请成为MDM Vendor</h3><ol>
<li>首先需要拥有一个 <a href="https://developer.apple.com/programs/enterprise/" target="_blank" rel="external">iOS Developer Enterprise Program</a> 帐号;</li>
<li>申请成为MDM Vendor，iOS企业开发帐号默认不支持MDM功能，需要向苹果申请才能开通，访问 <a href="https://developer.apple.com/contact/submit.php" target="_blank" rel="external">https://developer.apple.com/contact/submit.php</a>，并通过iOS企业开发帐号Agent身份登录，提交申请说明希望成为MDM Vendor，苹果一般在一个工作日内会处理完毕，处理完后会给Agent发邮件通知，此时再次登录到开发中心Add iOS Certificate界面或多处一个“MDM SCR”选项。</li>
</ol>
<a id="more"></a>
<h3 id="申请证书"><a href="#申请证书" class="headerlink" title="申请证书"></a>申请证书</h3><ol>
<li>在OS X上打开钥匙串，点击“钥匙串访问-&gt;证书助理-&gt;从证书颁发机构请求证书”，创建一个CSR，将此CSR存储至磁盘。记住“常用名称”字段为私钥的名字，创建CSR的同时，钥匙串“密钥”栏中会增加一个以该常用名称为名的私钥。</li>
<li>在钥匙串中选择创建CSR时的私钥，导出为MDMVendor.p12文件，导出时会要求你设置私钥密码，如果设置密码请记住这个密码（后面会用到）。</li>
<li><p>登录iOS Developer Center，进入Certificates，点击Add Certificate(“+”按钮)，选择Production下面的“MDM SCR”。</p>
<p> <img src="/image/ios-devices-mdm-1.png" alt=""></p>
<p>点击Continue-&gt;Continue，上传之前创建的CSR文件，然后点击Generate。点击Download，得到一个mdm.cer证书。</p>
</li>
</ol>
<h2 id="申请MDM-Customer"><a href="#申请MDM-Customer" class="headerlink" title="申请MDM Customer"></a>申请MDM Customer</h2><ol>
<li><p>创建CSR</p>
<p> 使用钥匙串创建一个CSR，记住密钥的常用名称，导出CSR，命名为MDMCustomer.csr。</p>
</li>
<li><p>获取编码的Plist文件</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python mdm_verdor_sign.py --csr MDMCustomer.csr -key &apos;MDMVendor.key&apos; --mdm mdm.cer</div></pre></td></tr></table></figure>
<p> MDMCustomer.csr提交给Vendor，Vendor对Customer提交的MDMCustomer.csr进行签名。我们使用 <a href="https://github.com/grinich/mdmvendorsign" target="_blank" rel="external">mdm_vendor_sign.py</a> 工具签名：<br>执行完后会生成一个plist_encoded文件。</p>
</li>
<li><p>获取MDM推送证书</p>
<p>用iOS企业开发帐号的Apple ID登录 <a href="https://identity.apple.com/pushcert/" target="_blank" rel="external">Apple Push Certificates Portal</a>，选择“Create a Certificate”，上传之前的plist_encoded文件。上传后会生成一个APNS的证书，下载得到.pem文件，双击文件安装到钥匙串。打开钥匙串可查看该证书名为“APSP:xxx”：</p>
<p><img src="/image/ios-devices-mdm-2.png" alt="">  </p>
<p>该证书即为MDM指令推送证书，可根据服务端需求导出p12或cer格式提供给服务端开发人员。</p>
</li>
</ol>
<h2 id="配置-MDM-Enrollment-Profile"><a href="#配置-MDM-Enrollment-Profile" class="headerlink" title="配置 MDM Enrollment Profile"></a>配置 MDM Enrollment Profile</h2><p>接下来需要生成一个MDM Enrollment Profile配置文件安装到目标iOS设备，之后MDM服务器就可以通过APNs发送指令到目标设备进行设备管理。</p>
<ol>
<li><p>使用iPhone Configuration Utility生成MDM Enrollment Profile</p>
<p> <a href="http://supportdownload.apple.com/download.info.apple.com/Apple_Support_Area/Apple_Software_Updates/Mac_OS_X/downloads/041-5033.20120307.CfYy8/iPhoneConfigUtility.dmg" target="_blank" rel="external">iPhone Configuration Utility</a> (IPCU中文名：iPhone配置实用工具)是苹果提供的专门用户制作iOS配置文件的工具。</p>
<blockquote>
<p>iPhone Configuration Utility 貌似已经别苹果抛弃了，替代工具可以使用 OS X Server 或直接用文章后面附的 xml 格式修改。</p>
</blockquote>
<p> a. 在IPCU中点击“新建”，创建一个描述文件，在“通用”中填写名称、标识符、机构、描述、安全性等。</p>
<p> <img src="/image/ios-devices-mdm-3.png" alt=""></p>
<p> b. 如果MDM服务器采用的是自签名的SSL证书，需要在描述文件的“凭证”中加入MDM服务器SSL对应的客户端证书（p12或cer），如果有密码，填写对应证书的密码。</p>
<p> <img src="/image/ios-devices-mdm-4.png" alt=""></p>
<p> c. 在“移动设备管理”中依次填入服务器URL、登记URL、主题、选择身份鉴定凭证，并设置MDM服务权限等。</p>
<p> <img src="/image/ios-devices-mdm-5.png" alt=""></p>
<p> 其中服务器URL为MDM服务器主服务地址，用于设备对MDM服务器指令的反馈；登记URL为设备MDM注册、注销等消息调用地址；主题为MDM推送证书APSP的用户ID；身份鉴定为MDM服务器SSL客户端证书</p>
</li>
<li><p>MDM Enrollment Profile格式参考</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</div><div class="line">&lt;plist version=&quot;1.0&quot;&gt;</div><div class="line">&lt;dict&gt;</div><div class="line">	&lt;key&gt;PayloadContent&lt;/key&gt;</div><div class="line">	&lt;array&gt;</div><div class="line">		&lt;dict&gt;</div><div class="line">			&lt;key&gt;AccessRights&lt;/key&gt;</div><div class="line">			&lt;integer&gt;8191&lt;/integer&gt;</div><div class="line">			&lt;key&gt;CheckInURL&lt;/key&gt;</div><div class="line">		&lt;string&gt;[CheckIn URL，必须为HTTPS]&lt;/string&gt;</div><div class="line">			&lt;key&gt;CheckOutWhenRemoved&lt;/key&gt;</div><div class="line">			&lt;true/&gt;</div><div class="line">			&lt;key&gt;IdentityCertificateUUID&lt;/key&gt;</div><div class="line">			&lt;string&gt;A1A4B9B4-D575-4B86-9CB2-1ECAEC947154&lt;/string&gt;</div><div class="line">			&lt;key&gt;PayloadDescription&lt;/key&gt;</div><div class="line">			&lt;string&gt;配置“移动设备管理”&lt;/string&gt;</div><div class="line">			&lt;key&gt;PayloadDisplayName&lt;/key&gt;</div><div class="line">			&lt;string&gt;移动设备管理&lt;/string&gt;</div><div class="line">			&lt;key&gt;PayloadIdentifier&lt;/key&gt;</div><div class="line">			&lt;string&gt;com.xxx.mdm.mdm&lt;/string&gt;</div><div class="line">			&lt;key&gt;PayloadOrganization&lt;/key&gt;</div><div class="line">			&lt;string&gt;[Organization Name]&lt;/string&gt;</div><div class="line">			&lt;key&gt;PayloadType&lt;/key&gt;</div><div class="line">			&lt;string&gt;com.apple.mdm&lt;/string&gt;</div><div class="line">			&lt;key&gt;PayloadUUID&lt;/key&gt;</div><div class="line">			&lt;string&gt;4DBD3BA6-0941-4EE6-99FD-7E2C82E95B5D&lt;/string&gt;</div><div class="line">			&lt;key&gt;PayloadVersion&lt;/key&gt;</div><div class="line">			&lt;integer&gt;1&lt;/integer&gt;</div><div class="line">			&lt;key&gt;ServerURL&lt;/key&gt;</div><div class="line">			&lt;string&gt;[Server URL，必须为HTTPS]&lt;/string&gt;</div><div class="line">			&lt;key&gt;SignMessage&lt;/key&gt;</div><div class="line">			&lt;true/&gt;</div><div class="line">			&lt;key&gt;Topic&lt;/key&gt;</div><div class="line">			&lt;string&gt;com.apple.mgmt.External.97eb479e-5ad1-4bcb-bc9a-ac7fe2a8e7c0&lt;/string&gt;</div><div class="line">		&lt;/dict&gt;</div><div class="line">		&lt;dict&gt;</div><div class="line">			&lt;key&gt;Password&lt;/key&gt;</div><div class="line">			&lt;string&gt;[SSL证书密码]&lt;/string&gt;</div><div class="line">			&lt;key&gt;PayloadCertificateFileName&lt;/key&gt;</div><div class="line">			&lt;string&gt;client.p12&lt;/string&gt;</div><div class="line">			&lt;key&gt;PayloadContent&lt;/key&gt;</div><div class="line">			&lt;data&gt;</div><div class="line">			[...base64 格式证书...]</div><div class="line">			&lt;/data&gt;</div><div class="line">			&lt;key&gt;PayloadDescription&lt;/key&gt;</div><div class="line">			&lt;string&gt;提供设备鉴定（证书或身份）。&lt;/string&gt;</div><div class="line">			&lt;key&gt;PayloadDisplayName&lt;/key&gt;</div><div class="line">			&lt;string&gt;client.p12&lt;/string&gt;</div><div class="line">			&lt;key&gt;PayloadIdentifier&lt;/key&gt;</div><div class="line">			&lt;string&gt;com.xxx.mdm.凭证&lt;/string&gt;</div><div class="line">			&lt;key&gt;PayloadOrganization&lt;/key&gt;</div><div class="line">			&lt;string&gt;[Organization Name]&lt;/string&gt;</div><div class="line">			&lt;key&gt;PayloadType&lt;/key&gt;</div><div class="line">			&lt;string&gt;com.apple.security.pkcs12&lt;/string&gt;</div><div class="line">			&lt;key&gt;PayloadUUID&lt;/key&gt;</div><div class="line">			&lt;string&gt;A1A4B9B4-D575-4B86-9CB2-1ECAEC947154&lt;/string&gt;</div><div class="line">			&lt;key&gt;PayloadVersion&lt;/key&gt;</div><div class="line">			&lt;integer&gt;1&lt;/integer&gt;</div><div class="line">		&lt;/dict&gt;</div><div class="line">	&lt;/array&gt;</div><div class="line">	&lt;key&gt;PayloadDescription&lt;/key&gt;</div><div class="line">	&lt;string&gt;描述文件描述。&lt;/string&gt;</div><div class="line">	&lt;key&gt;PayloadDisplayName&lt;/key&gt;</div><div class="line">	&lt;string&gt;MDM Enrollment Profile&lt;/string&gt;</div><div class="line">	&lt;key&gt;PayloadIdentifier&lt;/key&gt;</div><div class="line">	&lt;string&gt;com.xxx.mdm&lt;/string&gt;</div><div class="line">	&lt;key&gt;PayloadOrganization&lt;/key&gt;</div><div class="line">	&lt;string&gt;Tendyron&lt;/string&gt;</div><div class="line">	&lt;key&gt;PayloadRemovalDisallowed&lt;/key&gt;</div><div class="line">	&lt;false/&gt;</div><div class="line">	&lt;key&gt;PayloadType&lt;/key&gt;</div><div class="line">	&lt;string&gt;Configuration&lt;/string&gt;</div><div class="line">	&lt;key&gt;PayloadUUID&lt;/key&gt;</div><div class="line">	&lt;string&gt;EE9F29F2-ADD2-4E6B-ADE4-767791D9F9FA&lt;/string&gt;</div><div class="line">	&lt;key&gt;PayloadVersion&lt;/key&gt;</div><div class="line">	&lt;integer&gt;1&lt;/integer&gt;</div><div class="line">&lt;/dict&gt;</div><div class="line">&lt;/plist&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;申请Vendor&quot;&gt;&lt;a href=&quot;#申请Vendor&quot; class=&quot;headerlink&quot; title=&quot;申请Vendor&quot;&gt;&lt;/a&gt;申请Vendor&lt;/h2&gt;&lt;h3 id=&quot;申请成为MDM-Vendor&quot;&gt;&lt;a href=&quot;#申请成为MDM-Vendor&quot; class=&quot;headerlink&quot; title=&quot;申请成为MDM Vendor&quot;&gt;&lt;/a&gt;申请成为MDM Vendor&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;首先需要拥有一个 &lt;a href=&quot;https://developer.apple.com/programs/enterprise/&quot;&gt;iOS Developer Enterprise Program&lt;/a&gt; 帐号;&lt;/li&gt;
&lt;li&gt;申请成为MDM Vendor，iOS企业开发帐号默认不支持MDM功能，需要向苹果申请才能开通，访问 &lt;a href=&quot;https://developer.apple.com/contact/submit.php&quot;&gt;https://developer.apple.com/contact/submit.php&lt;/a&gt;，并通过iOS企业开发帐号Agent身份登录，提交申请说明希望成为MDM Vendor，苹果一般在一个工作日内会处理完毕，处理完后会给Agent发邮件通知，此时再次登录到开发中心Add iOS Certificate界面或多处一个“MDM SCR”选项。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://esoftmobile.com/tags/iOS/"/>
    
      <category term="MDM" scheme="http://esoftmobile.com/tags/MDM/"/>
    
  </entry>
  
  <entry>
    <title>Raspberry PI 无线网络设置</title>
    <link href="http://esoftmobile.com/2014/05/11/raspberry-usb-wifi/"/>
    <id>http://esoftmobile.com/2014/05/11/raspberry-usb-wifi/</id>
    <published>2014-05-11T10:04:07.000Z</published>
    <updated>2014-05-11T13:32:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>##1、 检测USB WiFi Adapter</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">lsusb</div><div class="line"># 如显示USB网卡型号说明系统已经安装相关驱动</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>##2、测试wifi信号</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo iwlist wlan0 scan</div><div class="line"># 找到自己的SSID</div></pre></td></tr></table></figure>
<p>##3、编辑网卡配置信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo nano /etc/network/interfaces</div></pre></td></tr></table></figure>
<p>将wlan0的部份修改如下，设置为静态IP：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">auto lo</div><div class="line"></div><div class="line">iface lo inet loopback</div><div class="line">iface eth0 inet dhcp</div><div class="line"></div><div class="line">allow-hotplug wlan0</div><div class="line">#iface wlan0 inet manual</div><div class="line">iface wlan0 inet static</div><div class="line">#    wpa-ssid 你要连接的wifi ssid</div><div class="line">#    wpa-psk 你的wpa连接密码</div><div class="line">address 192.168.1.106   # 设定的静态IP地址</div><div class="line">netmask 255.255.255.0   # 网络掩码</div><div class="line">gateway 192.168.1.1     # 网关</div><div class="line">network 192.168.1.1     # 网络地址</div><div class="line">wpa-roam /etc/wpa_supplicant/wpa_supplicant.conf</div><div class="line">iface default inet dhcp</div></pre></td></tr></table></figure>
<p>也可连接后自己获取IP：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev</div><div class="line">update_config=1</div><div class="line"></div><div class="line">network=&#123;</div><div class="line">    ssid=&quot;wifiname&quot;</div><div class="line">    psk=&quot;password&quot;</div><div class="line">    proto=RSN</div><div class="line">    key_mgmt=WPA-PSK</div><div class="line">    pairwise=CCMP</div><div class="line">    auth_alg=OPEN</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>link:<br><a href="http://www.ituring.com.cn/article/65378" target="_blank" rel="external">http://www.ituring.com.cn/article/65378</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##1、 检测USB WiFi Adapter&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;lsusb&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 如显示USB网卡型号说明系统已经安装相关驱动&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Raspberry Pi" scheme="http://esoftmobile.com/tags/Raspberry-Pi/"/>
    
  </entry>
  
  <entry>
    <title>Raspberry Pi蓝牙应用及iBeacon基站搭建</title>
    <link href="http://esoftmobile.com/2014/05/11/raspberry-pi-bluetooth/"/>
    <id>http://esoftmobile.com/2014/05/11/raspberry-pi-bluetooth/</id>
    <published>2014-05-11T10:03:51.000Z</published>
    <updated>2014-05-14T16:35:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>##一、基础应用</p>
<h3 id="安装蓝牙驱动"><a href="#安装蓝牙驱动" class="headerlink" title="安装蓝牙驱动"></a>安装蓝牙驱动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install bluetooth bluez-utils blueman</div></pre></td></tr></table></figure>
<h3 id="查看蓝牙适配器"><a href="#查看蓝牙适配器" class="headerlink" title="查看蓝牙适配器"></a>查看蓝牙适配器</h3><a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ lsusb</div><div class="line">Bus 001 Device 002: ID 0424:9514 Standard Microsystems Corp.</div><div class="line">Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</div><div class="line">Bus 001 Device 003: ID 0424:ec00 Standard Microsystems Corp.</div><div class="line">Bus 001 Device 004: ID 0a12:0001 Cambridge Silicon Radio, Ltd Bluetooth Dongle (HCI mode)</div><div class="line">Bus 001 Device 005: ID 148f:5370 Ralink Technology, Corp. RT5370 Wireless Adapter</div></pre></td></tr></table></figure>
<p>其中 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Bus 001 Device 004: ID 0a12:0001 Cambridge Silicon Radio, Ltd Bluetooth Dongle (HCI mode)</div></pre></td></tr></table></figure>
<p>为USB蓝牙适配器信息。</p>
<h3 id="查看蓝牙状态"><a href="#查看蓝牙状态" class="headerlink" title="查看蓝牙状态"></a>查看蓝牙状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ /etc/init.d/bluetooth status</div><div class="line">[ ok ] bluetooth is running.</div></pre></td></tr></table></figure>
<h3 id="扫描周边蓝牙设备"><a href="#扫描周边蓝牙设备" class="headerlink" title="扫描周边蓝牙设备"></a>扫描周边蓝牙设备</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hcitool scan</div><div class="line">Scanning ...</div><div class="line">	28:E1:4C:B0:67:9D	TracyYih的 iPhone</div></pre></td></tr></table></figure>
<h3 id="查看蓝牙连接情况"><a href="#查看蓝牙连接情况" class="headerlink" title="查看蓝牙连接情况"></a>查看蓝牙连接情况</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo l2ping 28:E1:4C:B0:67:9D</div></pre></td></tr></table></figure>
<p>可以看到返回结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Ping: 28:E1:4C:B0:67:9D from 00:1A:7D:DA:71:13 (data size 44) ...</div><div class="line">44 bytes from 28:E1:4C:B0:67:9D id 0 time 180.34ms</div><div class="line">44 bytes from 28:E1:4C:B0:67:9D id 1 time 127.61ms</div><div class="line">44 bytes from 28:E1:4C:B0:67:9D id 2 time 203.81ms</div><div class="line">44 bytes from 28:E1:4C:B0:67:9D id 3 time 80.83ms</div><div class="line">44 bytes from 28:E1:4C:B0:67:9D id 4 time 100.71ms</div><div class="line">...</div></pre></td></tr></table></figure>
<blockquote>
<p>这时手机上会出现一个配对请求，暂时配对不上，后续再研究。</p>
</blockquote>
<p>##二、搭建iBeacon基站</p>
<blockquote>
<p>注：Raspberry Pi本身不带蓝牙模块，需另外购买USB蓝牙4.0适配器。</p>
</blockquote>
<h3 id="安装依赖库"><a href="#安装依赖库" class="headerlink" title="安装依赖库"></a>安装依赖库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install libusb-dev libdbus-1-dev libglib2.0-dev libudev-dev libical-dev libreadline-dev</div></pre></td></tr></table></figure>
<h3 id="下载bluez"><a href="#下载bluez" class="headerlink" title="下载bluez"></a>下载bluez</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo mkdir bluezcd bluezsudo wget www.kernel.org/pub/linux/bluetooth/bluez-5.18.tar.gz</div></pre></td></tr></table></figure>
<h3 id="解压bluez"><a href="#解压bluez" class="headerlink" title="解压bluez"></a>解压bluez</h3><pre><code>sudo gunzip bluez-5.18.tar.gz
sudo tar xvf bluez-5.18.tar
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 安装bluez</div></pre></td></tr></table></figure>

cd bluez-5.18
sudo ./configure --disable-systemd
sudo make
sudo make install
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 查看蓝牙配置</div></pre></td></tr></table></figure>

hciconfig
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 开启蓝牙</div></pre></td></tr></table></figure>

sudo hciconfig hci0 up
sudo hciconfig hci0 leadv
sudo hciconfig hci0 noscan
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 设置beacon广播信息</div></pre></td></tr></table></figure>

#!/bin/bash
uuid=&quot;38 69 43 AC E6 3D 45 D7 BD 77 4C A6 76 D3 2A 5F&quot;
major=&quot;00 00&quot;
minor=&quot;00 00&quot;
power=&quot;C5&quot;
sudo hcitool -i hci0 cmd 0x08 0x0008 1E 02 01 1A 1A FF 4C 00 02 15 $uuid $major $minor $power 00
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">##三、python程序控制</div><div class="line"></div><div class="line">### 安装pybluez</div></pre></td></tr></table></figure>

sudo apt-get install libbluetooth-dev     # 依赖 libbluetooth-dev
sudo apt-get install python-dev         # 依赖 python-dev
sudo pip install pybluez
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">如果没安装pip可以用下面命令安装：</div></pre></td></tr></table></figure>

sudo apt-get install python-pip
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 查找附近的设备</div><div class="line"></div><div class="line">pybluez官方示例`inquiry.py`：</div></pre></td></tr></table></figure>

# file: inquiry.py
# auth: Albert Huang &lt;albert@csail.mit.edu&gt;
# desc: performs a simple device inquiry followed by a remote name request of
#       each discovered device
# $Id: inquiry.py 401 2006-05-05 19:07:48Z albert $
#

import bluetooth
print(&quot;performing inquiry...&quot;)
nearby_devices = bluetooth.discover_devices(lookup_names = True)
print(&quot;found %d devices&quot; % len(nearby_devices))
for addr, name in nearby_devices:
    print(&quot;  %s - %s&quot; % (addr, name))
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">运行</div></pre></td></tr></table></figure>

$ python inquiry.py
performing inquiry...
found 1 devices
  28:E1:4C:B0:67:9D - TracyYih的 iPhone
</code></pre><hr>
<p>link:  </p>
<ol>
<li><a href="http://www.phodal.com/blog/raspberry-pi-pcduino-bluetooth-configure" target="_blank" rel="external">raspberry pi 蓝牙,pcduino蓝牙</a>  </li>
<li><a href="https://learn.adafruit.com/pibeacon-ibeacon-with-a-raspberry-pi" target="_blank" rel="external">piBeacon - DIY iBeacon with a Raspberry Pi</a>  </li>
<li><a href="http://www.phodal.com/blog/raspberry-pi-bluetooth-use-python-and-pybluez" target="_blank" rel="external">用pybluez控制蓝牙</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##一、基础应用&lt;/p&gt;
&lt;h3 id=&quot;安装蓝牙驱动&quot;&gt;&lt;a href=&quot;#安装蓝牙驱动&quot; class=&quot;headerlink&quot; title=&quot;安装蓝牙驱动&quot;&gt;&lt;/a&gt;安装蓝牙驱动&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo apt-get install bluetooth bluez-utils blueman&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;查看蓝牙适配器&quot;&gt;&lt;a href=&quot;#查看蓝牙适配器&quot; class=&quot;headerlink&quot; title=&quot;查看蓝牙适配器&quot;&gt;&lt;/a&gt;查看蓝牙适配器&lt;/h3&gt;
    
    </summary>
    
    
      <category term="Raspberry Pi" scheme="http://esoftmobile.com/tags/Raspberry-Pi/"/>
    
  </entry>
  
  <entry>
    <title>某视频客户端逆向实践</title>
    <link href="http://esoftmobile.com/2014/04/06/video-app-reverse/"/>
    <id>http://esoftmobile.com/2014/04/06/video-app-reverse/</id>
    <published>2014-04-06T07:28:01.000Z</published>
    <updated>2014-04-07T02:55:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近看完了<a href="http://www.amazon.cn/iOS应用逆向工程-分析与实战-沙梓社/dp/B00HQW9AA6/ref=sr_1_1?ie=UTF8&amp;qid=1396769410&amp;sr=8-1&amp;keywords=ios+逆向工程" target="_blank" rel="external">《iOS应用逆向工程分析与实战》</a>，当你手里拿着锤子的时候，整个世界都成了钉子，所以迫不及待的想练练手。正好最近在某视频客户端上跟美剧，有时候想缓存下来离线看，但是由于版权原因，很多视频都不能缓存，所以今天逆向实践的主要目标就是能够缓存有版权的视频。</p>
<p>有人可能会问：你怎么就知道一定能够实现这个目标，万一带版权的视频压根儿就没有提供下载地址你怎么缓存啊？问得好，其实在拿到逆向这把锤子之前，我靠着纯体力已经能够下载到追的美剧了。使用Charles抓包工具获取到剧集的信息（关于Charles的使用可以看<a href="http://blog.devtang.com/blog/2013/12/11/network-tool-charles-intr/" target="_blank" rel="external">这里</a>），即使有版权的视频也会有<code>download_url</code>字段，然后将每个下载地址复制到迅雷里面下载。还好有了这段痛苦的经历，让我知道今天逆向的目标是可实现的。</p>
<a id="more"></a>
<p>##使用工具</p>
<p>某助手软件、class-dump、cycript、Charles、IDA、Theos、已越狱iPhone。</p>
<p>##分析与实践过程</p>
<p>通过某助手软件下载要进行逆向的视频客户端xxxxVideo.ipa（省去AppStore下载后还需破壳的过程），解压后将二进制文件复制出来，使用class-dump导出头文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ class-dump -H xxxxVideo -o headers</div></pre></td></tr></table></figure>
<p>用Xcode创建一个新工程，将头文件导入工程：</p>
<p><img src="/image/video-app-reverse-headers.png" alt="Headers"></p>
<p>在越狱的手机上安装该视频客户端，进入到视频播放界面，可以看到下面“缓存”按钮为灰色，很自然的会想到以该按钮为出发点开始分析。</p>
<p><img src="/image/video-app-video-detail-view-controller.png" alt="VideoDetailViewController"></p>
<p>下面通过cycript开始找到该按钮所在类（如果你安装了Reveal，那下面这个查找步骤就可以直接用Reveal实现了）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ ssh root@192.168.1.118  #通过ssh连接到手机</div><div class="line">~ root# ps -A | grep xxxxVideo  #获取到该视频客户端进程ID</div><div class="line">PID   TT  STAT      TIME COMMAND</div><div class="line">1438   ??  Ss     0:02.19 /var/mobile/Applications/414D20A3-EA72-4AB4-87E4-5A209F648EAB/xxxxVideo.app/xxxxVideo</div><div class="line">~ root# cycript -p 1438</div><div class="line"># var tabBarController = [UIApp keyWindow].rootViewController</div><div class="line"># &quot;&lt;SVTabBarController: 0x23da6a0&gt;&quot;</div><div class="line"># var detailViewController = tabBarController.selectedViewController.visibleViewController</div><div class="line"># &quot;&lt;VideoDetailViewController: 0x23eadc0&gt;&quot;</div></pre></td></tr></table></figure>
<p>所以当前播放界面对应的视图控制器类是<code>VideoDetailViewController</code>，但是在该头文件中并未找到缓存按钮或者下面的bar，不过下面这个属性引起了我的注意：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@property(retain, nonatomic) VideoDetailBarController *videoDetailBarController; // @synthesize videoDetailBarController=_videoDetailBarController;</div></pre></td></tr></table></figure>
<p>进入到该类对应的头文件，终于找到了下载按钮<code>downloadBtn</code>，并且很明显可以看出点击该按钮调用<code>- (void)downloadWithButton:(id)arg1</code>方法。因为缓存按钮有可以缓存和不能缓存两种状态，所以判断是否能缓存应该是在该方法里面实现的，由于没有其他成员变量或方法标记能否缓存，所以这个判断依据应该存在某个对象里面，这时可以注意到<code>dataManager</code>属性，它是一个数据管理对象，而管理的对象就是<code>videoAlbum</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">#import &quot;BaseViewController.h&quot;</div><div class="line"></div><div class="line">@class AsynImageView, FollowButton, RequestItem, TTTAttributedLabel, UIButton, UILabel, VideoAlbumDataManager;</div><div class="line"></div><div class="line">@interface VideoDetailBarController : BaseViewController</div><div class="line">&#123;</div><div class="line">	//...</div><div class="line">    FollowButton *_followBtn;</div><div class="line">    UIButton *_downloadBtn;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@property(retain, nonatomic) UIButton *downloadBtn; // @synthesize downloadBtn=_downloadBtn;</div><div class="line">@property(retain, nonatomic) FollowButton *followBtn; // @synthesize followBtn=_followBtn;</div><div class="line">//...</div><div class="line">@property(retain, nonatomic) VideoAlbumDataManager *dataManager; // @synthesize dataManager=_dataManager;</div><div class="line">- (void)downloadWithButton:(id)arg1;</div><div class="line">- (void)updateDownloadBarButtonItem;</div><div class="line">- (id)videoAlbum;</div><div class="line">- (id)initWithVideoDetailDataManager:(id)arg1;</div><div class="line">//...</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>进入<code>VideoAlbum</code>头文件，好家伙，一个模型类快300多行，而且方法远比属性多，不过眼尖的我一下就找到了我想要的东西——<code>canBeDownloaded</code>，这个就应该是判断视频能否被缓存的依据了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@interface VideoAlbum : NSObject</div><div class="line">//...</div><div class="line">- (BOOL)canBeShared;</div><div class="line">- (BOOL)canBeSubscribed;</div><div class="line">- (BOOL)canBeDownLoaded;</div><div class="line">- (BOOL)canBePlayed;</div><div class="line">//...</div></pre></td></tr></table></figure>
<p>马上验证，创建Theos Tweak工程，配置好其他信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">%hook VideoAlbum</div><div class="line"></div><div class="line">- (BOOL)canBeDownLoaded</div><div class="line">&#123;</div><div class="line">    return YES;</div><div class="line">&#125;</div><div class="line"></div><div class="line">%end</div></pre></td></tr></table></figure>
<p>编译、打包、安装：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ export THEOS_DEVICE_IP=192.168.1.118</div><div class="line">$ make package install</div></pre></td></tr></table></figure>
<p>再次运行该视频客户端，“缓存”按钮恢复正常了，点击后弹出了缓存界面，选择剧集后可以正常下载。</p>
<p><img src="/image/video-app-can-be-download.png" alt="Can be downloaded"> <img src="/image/video-app-download-view-controller.png" alt="Download"></p>
<hr>
<p>到了这里本文应该就要结束了，嘛，还没玩过瘾？那我们继续折腾吧，看到视频上面<code>登录VIP 30</code>吗？非VIP用户每个视频前面有30秒的广告，而且VIP专区的视频只能看前面的5分钟，浪费时间就是浪费生命，但是我等屌丝又买不起VIP好吗？那下面我们就告别广告，成为VIP。</p>
<p>因为每次进到“个人资料”时客户端都会进行通讯，应该是获取用户信息，使用Charles抓取到以下信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;attachment&quot;: &#123;</div><div class="line">        &quot;status&quot;: 0, </div><div class="line">        &quot;msg&quot;: &quot;ok&quot;, </div><div class="line">        &quot;jifen&quot;: 0, </div><div class="line">        &quot;dengji&quot;: 0, </div><div class="line">        &quot;uid&quot;: xxxxxxxxx, </div><div class="line">        &quot;passport&quot;: &quot;yyyyyyyyyy@sina.sohu.com&quot;, </div><div class="line">        &quot;nickname&quot;: &quot;TracyYih&quot;, </div><div class="line">        &quot;smallimg&quot;: &quot;http://tp3.sinaimg.cn/1342106870/50/5664617611/1&quot;, </div><div class="line">        &quot;mobile&quot;: &quot;&quot;, </div><div class="line">        &quot;email&quot;: &quot;&quot;, </div><div class="line">        &quot;birthday&quot;: &quot;&quot;, </div><div class="line">        &quot;gender&quot;: 1, </div><div class="line">        &quot;utype&quot;: 31, </div><div class="line">        &quot;token&quot;: &quot;1ee4863ec29030730e624afdb401a3e6&quot;, </div><div class="line">        &quot;isVip&quot;: &quot;0&quot;, </div><div class="line">        &quot;vipexpire&quot;: &quot;&quot;</div><div class="line">    &#125;, </div><div class="line">    &quot;message&quot;: &quot;成功&quot;, </div><div class="line">    &quot;debug&quot;: null, </div><div class="line">    &quot;status&quot;: 200</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看到了吗？<code>isVip</code>字段为0，在头文件中搜索“isVip”，找到两个类：<code>UserDataModel</code> 和 <code>UserInterface</code>，将属性与通讯返回的JSON格式对比可以看出，<code>UserDataModel</code> 和 JSON数据一一对应，即为用户信息模型类，而在<code>UserInterface</code>类中有一个<code>UserDataModel</code>实例作为属性，还有一些其他的方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">@interface UserDataModel : NSObject</div><div class="line">&#123;</div><div class="line">    BOOL isVip;</div><div class="line">    NSString *passport;</div><div class="line">    NSString *password;</div><div class="line">    NSString *nickname;</div><div class="line">    NSString *profileImage;</div><div class="line">    NSString *mobile;</div><div class="line">    NSString *email;</div><div class="line">    NSString *birthday;</div><div class="line">    NSString *requestToken;</div><div class="line">    NSString *vipExpire;</div><div class="line">    NSString *score;</div><div class="line">    NSString *grade;</div><div class="line">    NSString *uid;</div><div class="line">    int gender;</div><div class="line">    int loginTpye;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@property int loginTpye; // @synthesize loginTpye;</div><div class="line">@property int gender; // @synthesize gender;</div><div class="line">@property(copy, nonatomic) NSString *uid; // @synthesize uid;</div><div class="line">@property(copy) NSString *grade; // @synthesize grade;</div><div class="line">@property(copy) NSString *score; // @synthesize score;</div><div class="line">@property(copy) NSString *vipExpire; // @synthesize vipExpire;</div><div class="line">@property BOOL isVip; // @synthesize isVip;</div><div class="line">@property(copy) NSString *requestToken; // @synthesize requestToken;</div><div class="line">@property(copy) NSString *birthday; // @synthesize birthday;</div><div class="line">@property(copy) NSString *email; // @synthesize email;</div><div class="line">@property(copy) NSString *mobile; // @synthesize mobile;</div><div class="line">@property(copy) NSString *profileImage; // @synthesize profileImage;</div><div class="line">@property(copy) NSString *nickname; // @synthesize nickname;</div><div class="line">@property(copy) NSString *password; // @synthesize password;</div><div class="line">@property(copy) NSString *passport; // @synthesize passport;</div><div class="line">//...</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>所以我们应该关注最基础的模型（<code>UserDataModel</code>），不管接口返回的用户信息中是否为VIP，我们统一设置他为VIP:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">%hook UserDataModel</div><div class="line"></div><div class="line">- (BOOL)isVip</div><div class="line">&#123;</div><div class="line">    return YES;</div><div class="line">&#125;</div><div class="line"></div><div class="line">%end</div></pre></td></tr></table></figure>
<p>编译、打包、安装，重新运行该视频客户端，没有任何变化，应该是哪里出问题。再仔细看一遍<code>UserDataModel</code>类，发现<code>vipExpire</code>字段，而接口返回的该字段为空字符串，所以应该是和这个字段有关系，而且我们只知道<code>vipExpire</code>是一个字符串（应该是个时间），不知道它具体格式，总不能一个个试吧，上IDA。</p>
<p>还是搜索“isVip”，在<code>UserDataModel</code>的isVip方法中只是简单的存储，没有其他逻辑判断：</p>
<p><img src="/image/video-app-ida-userdatemodel-isvip.png" alt="UserDataModel isVip"></p>
<p>再看<code>UserInterface</code>中的getModelIsVip(isVip)方法，非常有料：</p>
<p><img src="/image/video-app-ida-isvip-0.png" alt="IDA0"></p>
<p>首先获取属性dataModel的isVip属性，如果为NO，直接返回NO，否则进入下面的判断，对应的代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (BOOL)getModelIsVip</div><div class="line">&#123;</div><div class="line">	if (self.dataModel.isVip) &#123;</div><div class="line">		//继续判断</div><div class="line">	&#125;</div><div class="line">	retrun NO;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="/image/video-app-ida-isvip-1.png" alt="IDA0"></p>
<p>接着就判断<code>vipExpire</code>字段是否为空，这个和我们之前的设想一致，对应代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- (BOOL)getModelIsVip</div><div class="line">&#123;</div><div class="line">	if (self.dataModel.isVip) &#123;</div><div class="line">		NSString *vipExpire = self.dataModel.vipExpire;</div><div class="line">		if (vipExpire &amp;&amp; vipExpire.length) &#123;</div><div class="line">			//继续判断</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	retrun NO;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="/image/video-app-ida-isvip-2.png" alt="IDA0"></p>
<p><img src="/image/video-app-ida-isvip-3.png" alt="IDA0"></p>
<p>判断<code>dateFormatter</code>属性是否为空，如果为空，创建该对象。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">- (BOOL)getModelIsVip</div><div class="line">&#123;</div><div class="line">	if (self.dataModel.isVip) &#123;</div><div class="line">		NSString *vipExpire = self.dataModel.vipExpire;</div><div class="line">		if (vipExpire &amp;&amp; vipExpire.length) &#123;</div><div class="line">			if (!self.dateFormatter) &#123;</div><div class="line">				self.dateFormatter = [[[NSDateFormatter alloc] init] autorelease];</div><div class="line">				[self.dateFormatter setDateFormat:@&quot;yyyy-MM-dd HH:mm:ss&quot;];</div><div class="line">				NSLocale *locale = [[NSLocale alloc] initWithLocaleIdentifier:@&quot;en_US&quot;];</div><div class="line">				[self.dateFormatter setLocale:locale];</div><div class="line">				//[locale release]; 汇编中没见到这句，难道内存泄露了？</div><div class="line">			&#125;</div><div class="line">			//继续判断</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	retrun NO;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="/image/video-app-ida-isvip-4.png" alt="IDA0"></p>
<p>比较VIP有效期和当前时间：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">- (BOOL)getModelIsVip</div><div class="line">&#123;</div><div class="line">	if (self.dataModel.isVip) &#123;</div><div class="line">		NSString *vipExpire = self.dataModel.vipExpire;</div><div class="line">		if (vipExpire &amp;&amp; vipExpire.length) &#123;</div><div class="line">			if (!self.dateFormatter) &#123;</div><div class="line">				self.dateFormatter = [[[NSDateFormatter alloc] init] autorelease];</div><div class="line">				[self.dateFormatter setDateFormat:@&quot;yyyy-MM-dd HH:mm:ss&quot;];</div><div class="line">				NSLocale *locale = [[NSLocale alloc] initWithLocaleIdentifier:@&quot;en_US&quot;];</div><div class="line">				[self.dateFormatter setLocale:locale];</div><div class="line">				//[locale release]; 汇编中没见到这句，难道内存泄露了？</div><div class="line">			&#125;</div><div class="line">			NSDate *vipExpireDate = [self.dateFormatter dateFormString:vipExpire];</div><div class="line">			if ([vipExpireDate compare:[NSDate date]]) &#123;</div><div class="line">				return YES;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	retrun NO;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>到这里我们基本还原了判断是否为VIP的方法，逻辑清楚了，下面我们要实现VIP身份就简单了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">#define kYearInterval  31536000.0</div><div class="line"></div><div class="line">%hook UserDataModel</div><div class="line"></div><div class="line">- (BOOL)isVip</div><div class="line">&#123;</div><div class="line">    return YES;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (NSString *)vipExpire</div><div class="line">&#123;</div><div class="line">    NSDate *date = [[NSDate date] dateByAddingTimeInterval:kYearInterval];</div><div class="line">    NSDateFormatter *dateFormatter = [[[NSDateFormatter alloc] init] autorelease];</div><div class="line">    [dateFormatter setDateFormat:@&quot;yyyy-MM-dd HH:mm:ss&quot;];</div><div class="line">    return [dateFormatter stringFromDate:date];</div><div class="line">&#125;</div><div class="line"></div><div class="line">%end</div></pre></td></tr></table></figure>
<p>编译、打包、安装，重新运行客户端，高大上的VIP有木有？看视频没有广告了有木有？VIP视频随便看有木有？</p>
<p><img src="/image/video-app-vip-logo.png" alt="VIP"> <img src="/image/video-app-vip-detail.png" alt="VIP"></p>
<p>##总结</p>
<p>至此，整个逆向过程就结束了，授人以鱼不如授人以渔，所以我详细的描述了分析的过程而不是结果。此外，本文内容仅供个人学习交流，所以即使你知道我所逆向的是哪个客户端，也不要将本文内容用于有损该客户端利益的目的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近看完了&lt;a href=&quot;http://www.amazon.cn/iOS应用逆向工程-分析与实战-沙梓社/dp/B00HQW9AA6/ref=sr_1_1?ie=UTF8&amp;amp;qid=1396769410&amp;amp;sr=8-1&amp;amp;keywords=ios+逆向工程&quot;&gt;《iOS应用逆向工程分析与实战》&lt;/a&gt;，当你手里拿着锤子的时候，整个世界都成了钉子，所以迫不及待的想练练手。正好最近在某视频客户端上跟美剧，有时候想缓存下来离线看，但是由于版权原因，很多视频都不能缓存，所以今天逆向实践的主要目标就是能够缓存有版权的视频。&lt;/p&gt;
&lt;p&gt;有人可能会问：你怎么就知道一定能够实现这个目标，万一带版权的视频压根儿就没有提供下载地址你怎么缓存啊？问得好，其实在拿到逆向这把锤子之前，我靠着纯体力已经能够下载到追的美剧了。使用Charles抓包工具获取到剧集的信息（关于Charles的使用可以看&lt;a href=&quot;http://blog.devtang.com/blog/2013/12/11/network-tool-charles-intr/&quot;&gt;这里&lt;/a&gt;），即使有版权的视频也会有&lt;code&gt;download_url&lt;/code&gt;字段，然后将每个下载地址复制到迅雷里面下载。还好有了这段痛苦的经历，让我知道今天逆向的目标是可实现的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hack" scheme="http://esoftmobile.com/tags/Hack/"/>
    
  </entry>
  
  <entry>
    <title>《我编程，我快乐》</title>
    <link href="http://esoftmobile.com/2014/03/22/the-passionate-programmer/"/>
    <id>http://esoftmobile.com/2014/03/22/the-passionate-programmer/</id>
    <published>2014-03-22T05:56:35.000Z</published>
    <updated>2014-03-22T06:16:17.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/image/the_passionate_programmer.jpg" alt="The Passionate Programmer"></p>
<p>###1. 稳定成熟的技术还是未成熟的新技术?</p>
<p>无论做出哪种选择，最终目的是产生利润。Both ends of the technology adoption curve might prove to be lucrative.</p>
<a id="more"></a>
<p>###2. 供应和需求</p>
<p>不要在价格上竞争，你承受不起。You can’t compete on price. In fact, you can’t afford to compete on price.</p>
<p>发现市场上的不平衡。Exploit market imbalances.</p>
<p>###3. 只会编程是不够的</p>
<p>仔细思考在哪个商业领域投入时间。Now is the time to think about business domains you invest your time in.</p>
<p>###4. 做团队中最差的</p>
<p>做乐队中最差的乐手。Be the worst guy in every band you’re in.</p>
<p>你身边的人会对你产生很大的影响，明智地选择你的圈子。The people around you affect your own performance. Choose your crowd wisely.</p>
<p>###5. 在思维上投资</p>
<p>没人给过我机会……？要学会抓住机遇！I haven’t been given the opportunity…? Seize the opportunity!</p>
<p>###6. 不要听从父母</p>
<p>###7. 做一名通才</p>
<p>通才很少，所以很珍贵。Generalists are rare… and, therefore, precious.</p>
<p>你的技术水平应该超越技术平台。Your skills should transcend technology platforms.</p>
<p>###8. 成为一名专家</p>
<p>很多人认为专攻某种技术就简单地意味着不知道其他技术。Too many of us seem to believe that specializing in something simply means not knowing about other things.</p>
<p>###9. 切忌孤注一掷</p>
<p>以特定技术厂商为中心的观点，缺乏远见。Vendor-centric views are typically myopic.</p>
<p>###10. 热爱它，不然就离开它</p>
<p>工作，因为你无法停止工作。Work because you couldn’t not work.</p>
<p>###11. 学习钓鱼</p>
<p>要主动问，不要等着别人来告诉你！Don’t wait to be told.Ask!</p>
<p>###12. 学习行业是如何运转的</p>
<p>只有了解了一个行业后，你才能创造性地有所建树。You can’t creatively help a business until you know how it works.</p>
<p>###13. 寻找良师</p>
<p>可以依赖别人，但要确保这个人是靠得住的。It’s OK to depend on someone. Just make sure it’s the right person.</p>
<p>###14. 做一名良师</p>
<p>想要弄明白自己是不是真正懂得某一知识，那就把它讲给其他人听。To find out whether you really know something, try teaching it to someone else.</p>
<p>做导师不会下岗。Mentors tend not to get laid off.</p>
<p>###15. 练习，练习，再练习</p>
<p>在极限处练习。Practice at your limits.</p>
<p>###16. 做事的方法</p>
<p>想要拥有自己的步骤，那就执行它。If you want to feel you own a process, help implement it.</p>
<p>###17. 站在巨人的肩膀上</p>
<p>从现有程序中得到领悟。Mine existing code for insights.</p>
<p>用现有程序来反思自己的程序。Use existing code to reflect on your own capabilities.</p>
<p>###18. 在工作中，将自己自动化</p>
<p>###19. 就是现在</p>
<p>就现在，我们能做些什么？What can we do? Right Now?</p>
<p>###20. 读心术</p>
<p>读心术用得好，人们就会信任你。The mind-reading trick, if done well, leads to people depending on you.</p>
<p>###21. 每日成绩</p>
<p>每天都有可汇报的成绩。Have an accomplishment to report every day.</p>
<p>###22. 别忘了你在为谁工作</p>
<blockquote>
<p>好经理的职责不是“做替补”，即了解整个团队的工作应该怎么做，在出现难题的时候就自己上。好经理的职责应该是为团队设定优先级，确保团队具备完成工作的一切需要，保证团队保持干劲和工作效率，并促使团队最终顺利完成工作。整个团队的工作干得出色，就证明这个经理的工作非常优秀。</p>
</blockquote>
<p>经理的成功，就是你们的成功。Your managers’ successes are your successes.</p>
<p>###23. 安分守己</p>
<p>要有雄心，但不必路人皆知。Be ambitious, but don’t wear it on your sleeve.</p>
<p>###24. 今天我能把工作做到多好？</p>
<p>你能为工作增添多少乐趣？How much more fun could you make your job?</p>
<p>###25. 你的价值是多少</p>
<p>问自己“今天实现自己的价值了么？”Ask, “Was I worth it today?”</p>
<p>###26. 一桶水中的鹅卵石</p>
<p>小心！别让成功冲昏了头脑。Beware of being blinded by your own success.</p>
<p>###27. 爱上维护</p>
<p>维护也可以成为自由和创造的沃土。Maintenance can be a place of freedom and creativity.</p>
<p>###28. 8小时激情燃烧</p>
<p>做项目像是马拉松，而不是全速短跑。Projects are marathons, not sprints.</p>
<p>###29. 学习如何失败</p>
<p>每个错误的音调离正确的音调不过一步之遥。Every wrong note is but one step away from a right one.</p>
<p>充满压力的时候是赢得忠诚的最好时机。Stressful times offer the best opportunities to build loyalty.</p>
<p>###30. 说“不”</p>
<p>为了避免失望而说“是”，就是在说谎。Saying “yes” to avoid disappointment is just lying.</p>
<p>###31. 不要恐慌</p>
<p>英雄从不恐慌。Heroes never panic.</p>
<p>###32. 说出来、行动、展示</p>
<p>状态报告可以帮助你推销自己。Status reports can help you market yourself.</p>
<p>###33. 不要忽视感觉</p>
<p>绩效考核永远都不会是客观的。Performance appraisals are never objective.</p>
<p>###34. 探险向导</p>
<p>客户害怕你。Your customers are afraid of you.</p>
<p>###35. 学会沟通，善于写作</p>
<p>你自己就是你要解释的内容。You are what you can explain.</p>
<p>###36. 到场</p>
<p>了解你的同事。Learn about your colleagues.</p>
<p>###37. 适当的言语</p>
<p>请用行业术语推销你的成就。Market your accomplishments in the language of your business.</p>
<p>###38. 改变世界</p>
<p>带着任务去上班，并确保别人知道你的任务。Have a mission. Make sure people know it.</p>
<p>###40. 创建自己的商标</p>
<p>你的名字就是你的商标。Your name is your brand.</p>
<p>Google永远不会忘记。Google never forgets.</p>
<p>###41. 发布你编写的程序</p>
<p>人人都能使用Rails，但很少有人能开发出Rails。Anyone can use Rails. Few can say Rails contributor.</p>
<p>###42. 变为卓越的能力</p>
<p>展示或者让它死亡！Demo or die!</p>
<p>###43. 建立关系</p>
<p>恐惧感使我们无法接近专业人士。Fear gets between us and the pros.</p>
<p>###44. 已经过时的技术</p>
<p>你引以为傲的新技术已经过时了。Your shiny new skills are already obsolete.</p>
<p>###45. 你已经失去工作了</p>
<p>你不是你的工作。You are not your job.</p>
<p>###46. 没有终点的道路</p>
<p>不要关注结果，要关注做事情的过程。Focus on doing, not on being done.</p>
<p>###47. 给自己做一份蓝图</p>
<p>###48. 要注意观察市场变化</p>
<p>留意那些技术达人。Watch the alpha geeks.</p>
<p>###49. 镜子里的胖子</p>
<p>开发员们，要自我反省。Developer, review thyself.</p>
<p>###50. 南印度捉猴陷阱</p>
<p>价值僵固使你脆弱。Rigid values make you fragile.</p>
<p>###51. 避免瀑布型职业计划</p>
<p>###52. 每天都有进步</p>
<p>###53. 独立</p>
<hr>
<p>多看笔记 来自多看阅读 for Kindle</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/image/the_passionate_programmer.jpg&quot; alt=&quot;The Passionate Programmer&quot;&gt;&lt;/p&gt;
&lt;p&gt;###1. 稳定成熟的技术还是未成熟的新技术?&lt;/p&gt;
&lt;p&gt;无论做出哪种选择，最终目的是产生利润。Both ends of the technology adoption curve might prove to be lucrative.&lt;/p&gt;
    
    </summary>
    
    
      <category term="只读经典" scheme="http://esoftmobile.com/tags/%E5%8F%AA%E8%AF%BB%E7%BB%8F%E5%85%B8/"/>
    
  </entry>
  
  <entry>
    <title>Logos</title>
    <link href="http://esoftmobile.com/2014/03/16/logos/"/>
    <id>http://esoftmobile.com/2014/03/16/logos/</id>
    <published>2014-03-16T14:43:17.000Z</published>
    <updated>2014-03-18T04:58:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>Logos作为<a href="http://iphonedevwiki.net/index.php/Theos" target="_blank" rel="external">Theos</a>开发组件的一部分，通过一组特殊的预处理指令，可以让编写函数钩子（hook）代码变得非常简单和清晰。</p>
<p>Logos提供的语法大大的简化了<a href="http://iphonedevwiki.net/index.php/MobileSubstrate" target="_blank" rel="external">MobileSubstrate</a>拓展程序（tweaks，能够hook系统中其他方法）的开发，这里所说的“Method hooking”是指通过替换或修改的方式改变其他应用中某些类的某些方法。</p>
<p>Logos是随着Theos发布的，你能够在用Theos创建的项目中直接使用Logos的语法。更多关于Theos的信息，请查看<a href="http://iphonedevwiki.net/index.php/Theos" target="_blank" rel="external">这里</a>。</p>
<a id="more"></a>
<p>##使用Logos</p>
<p>###例子</p>
<p>下面是由logify.pl（/theos/bin/logify.pl）生成的一个非常简单的Logos tweak的例子</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">%hook AFHTTPRequestOperation</div><div class="line">- (NSHTTPURLResponse *)response &#123; %log; NSHTTPURLResponse * r = %orig; NSLog(@&quot; = %@&quot;, r); return r; &#125;</div><div class="line">- (void)setResponseSerializer:(AFHTTPResponseSerializer &lt;AFURLResponseSerialization&gt; * )responseSerializer &#123; %log; %orig; &#125;</div><div class="line">- (AFHTTPResponseSerializer &lt;AFURLResponseSerialization&gt; * )responseSerializer &#123; %log; AFHTTPResponseSerializer &lt;AFURLResponseSerialization&gt; *  r = %orig; NSLog(@&quot; = 0x%x&quot;, (unsigned int)r); return r; &#125;</div><div class="line">- (id )responseObject &#123; %log; id  r = %orig; NSLog(@&quot; = %@&quot;, r); return r; &#125;</div><div class="line">%end</div></pre></td></tr></table></figure>
<p>你可以使用logify.pl来创建一个头文件的Logos源文件，用来打印该头文件中所有函数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export THEOS=/opt/theos</div><div class="line">$THEOS/bin/logify.pl ./AFHTTPRequestOperation.h</div></pre></td></tr></table></figure>
<p>###Logos指令表</p>
<p>####%init</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">%init</div><div class="line">%init([&lt;class&gt;=&lt;expr&gt;, …])</div><div class="line">%init(Group[, [+|-]&lt;class&gt;=&lt;expr&gt;, …])</div></pre></td></tr></table></figure>
<p>用来初始化一个分组（group）或默认分组，如果不传参数会初始化“_ungrouped”分组，传 <code>class=expr</code> 参数会在指定类初始化的时候替换给定的表达式，<code>+</code>号（作为Objective-C中类方法）在对应的类名中能够优先处理来替换元类的表达式，如果没有特别指定，默认标记是<code>-</code>，只是替换当前类。</p>
<p>####%hook</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">%hook ClassName</div></pre></td></tr></table></figure>
<p>指定要hook的类，以%end结束。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">%hook SBApplicationController</div><div class="line">-(void)uninstallApplication:(SBApplication *)application &#123;</div><div class="line">    NSLog(@&quot;Hey, we&apos;re hooking uninstallApplication:!&quot;);</div><div class="line">    %orig; // Call the original implementation of this method</div><div class="line">    return;</div><div class="line">&#125;</div><div class="line">%end</div></pre></td></tr></table></figure>
<p>####%subclass</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">%subclass Classname: Superclass &lt;Protocol, Protocol&gt;</div><div class="line"></div><div class="line">%new</div><div class="line">- (void)someNewAddedMethod</div><div class="line">&#123;</div><div class="line">	//...</div><div class="line">&#125;</div><div class="line"></div><div class="line">%end</div></pre></td></tr></table></figure>
<p>用于申明在运行时创建的类，支持方法，但暂时不支持成员变量。如果增加父类中不存在的方法，需要给这些方法指定%new标识。对象实例化时，你需要用到%c标识。</p>
<p>####%group</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">%group GroupName</div><div class="line">%end</div></pre></td></tr></table></figure>
<p>开始一个hook分组，通常用于条件执行或代码组织。所有没有特别指定的%hook都被归为“_grouped”分组。</p>
<p>####%new</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">%new</div><div class="line">%new(signature)</div></pre></td></tr></table></figure>
<p>为被hook的类或子类增加新的方法，功能与<code>class_addMethod()</code>相同，<code>signature</code>是新方法的类型编码（Objective-C type encoding），如果不指定，会自动生成一个。</p>
<p>####%ctor</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">%ctor </div><div class="line">&#123;</div><div class="line">	//...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>生成一个匿名构造函数(默认的优先级)。如果不指定，Theos会隐式定义：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">%ctor &#123; %init(_ungrouped); &#125;</div></pre></td></tr></table></figure>
<p>作为tweak程序的入口，可以用于做一些其他初始化处理，如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">%ctor </div><div class="line">&#123;</div><div class="line">	%init;</div><div class="line">	if (kCFCoreFoundationVersionNumber &gt;= kCFCoreFoundationVersionNumber_iOS_7_0) &#123;</div><div class="line">		%init(HookGroupForIOS7);</div><div class="line">	&#125; else &#123;</div><div class="line">		%init(HookGroupForIOS6);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>####%end</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">%end</div></pre></td></tr></table></figure>
<p>结束%hook、 %subclass、 %group块。</p>
<p>####%config</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">%config(X=Y);</div></pre></td></tr></table></figure>
<p>设置一个logos配置标记。</p>
<p>配置标记：</p>
<ul>
<li>generator<ul>
<li><strong>MobileSubstrate</strong><br>生成使用 <a href="http://iphonedevwiki.net/index.php/MobileSubstrate" target="_blank" rel="external">MobileSubstrate</a>来hook的代码。</li>
<li><strong>internal</strong><br>生成只使用内置的Objective-C运行时函数来hook的代码。</li>
</ul>
</li>
<li>warnings<ul>
<li><strong>none</strong><br>忽略所有警告。</li>
<li><strong>default</strong><br>报告非致命的警告。</li>
<li><strong>error</strong><br>所有警告当做错误处理。</li>
</ul>
</li>
<li>dump<ul>
<li><strong>yaml</strong><br>以YAML格式导出内部解析树。</li>
<li><strong>perl</strong><br>以perl源码能处理的格式导出内部解析树。</li>
</ul>
</li>
</ul>
<p>####%c</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">%c([+|-]Class)</div></pre></td></tr></table></figure>
<p>在运行时获取一个类的定义，作用等同于<code>objc_getClass()</code>，<code>+</code>号获取元类，默认为<code>-</code>号，获取当前类。</p>
<p>####%orig</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">%orig</div><div class="line">%orig(arg1,arg2,arg3)</div></pre></td></tr></table></figure>
<p>执行被hook函数的原始代码，不要在使用%new申明的方法中使用。奇怪的是能够在subclass中使用，因为MobileSubstrate在hook时会生成一个父调用闭包（supercall closure），如果所hook的函数在当前的类中不存在，就会调用父类的实现。参数会被传递给原始的函数，不用加<code>self</code>和<code>_cmd</code>，Logos已经帮你加了。</p>
<p>####%log</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">%log</div><div class="line">%log([(&lt;type&gt;)&lt;expr&gt;, …])</div></pre></td></tr></table></figure>
<p>默认将类名、函数名、参数等信息写入syslog，也可以追加其他信息。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">%hook SpringBoard</div><div class="line">- (void)menuButtonDown:(id)down</div><div class="line">&#123;</div><div class="line">	%log((NSString *)@&quot;hello&quot;, (NSString *)@&quot;MobileSubstrate&quot;);</div><div class="line">	%orig;	//调用原方法</div><div class="line">&#125;</div><div class="line">%end</div></pre></td></tr></table></figure>
<p>##Logos代码跨文件访问</p>
<p>默认情况下，Logos的预处理器在Build时只会处理一个 .xm 文件。然而，也可以实现将Logos hook代码分割到多个文件中。首先，主文件（通常为Tweak.xm）需要改为 .xmi 格式；然后可以在它里面使用<code>#include</code>引入其他 .xm 文件。Logos的预处理器会在开始处理之前就将其他文件加到主文件，.xmi 会被优先处理。</p>
<p>##Logos拓展名</p>
<table>
<thead>
<tr>
<th>Extension</th>
<th>Process order</th>
</tr>
</thead>
<tbody>
<tr>
<td>.x</td>
<td>先被Logos处理，然后被作为Objective-C预处理和编译</td>
</tr>
<tr>
<td>.xm</td>
<td>先被Logos处理，然后被当做Objective-C++预处理和编译</td>
</tr>
<tr>
<td>.xi</td>
<td>首先被当做Objective-C预处理，然后由Logos处理结果，最后被编译</td>
</tr>
<tr>
<td>.xmi</td>
<td>首先被当做Objective-C++预处理，然后由Logos处理结果，最后被编译</td>
</tr>
</tbody>
</table>
<p>xi 和 xmi 文件能够使用Logos指令作为 <code>#define</code> 宏进行预处理。</p>
<hr>
<p>参考：  </p>
<ul>
<li><a href="http://iphonedevwiki.net/index.php/Logos" target="_blank" rel="external">http://iphonedevwiki.net/index.php/Logos</a></li>
<li><a href="http://www.amazon.cn/iOS应用逆向工程-分析与实战-沙梓社/dp/B00HQW9AA6/ref=sr_1_1?ie=UTF8&amp;qid=1392363628&amp;sr=8-1&amp;keywords=ios逆向工程" target="_blank" rel="external">iOS应用逆向工程-分析与实战</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Logos作为&lt;a href=&quot;http://iphonedevwiki.net/index.php/Theos&quot;&gt;Theos&lt;/a&gt;开发组件的一部分，通过一组特殊的预处理指令，可以让编写函数钩子（hook）代码变得非常简单和清晰。&lt;/p&gt;
&lt;p&gt;Logos提供的语法大大的简化了&lt;a href=&quot;http://iphonedevwiki.net/index.php/MobileSubstrate&quot;&gt;MobileSubstrate&lt;/a&gt;拓展程序（tweaks，能够hook系统中其他方法）的开发，这里所说的“Method hooking”是指通过替换或修改的方式改变其他应用中某些类的某些方法。&lt;/p&gt;
&lt;p&gt;Logos是随着Theos发布的，你能够在用Theos创建的项目中直接使用Logos的语法。更多关于Theos的信息，请查看&lt;a href=&quot;http://iphonedevwiki.net/index.php/Theos&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Notes" scheme="http://esoftmobile.com/tags/Notes/"/>
    
      <category term="Hack" scheme="http://esoftmobile.com/tags/Hack/"/>
    
  </entry>
  
  <entry>
    <title>Method Swizzling</title>
    <link href="http://esoftmobile.com/2014/02/19/method-swizzling/"/>
    <id>http://esoftmobile.com/2014/02/19/method-swizzling/</id>
    <published>2014-02-19T01:31:12.000Z</published>
    <updated>2014-02-21T23:54:11.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文翻译自<a href="http://nshipster.com/" target="_blank" rel="external">NSHipster</a>的文章<a href="http://nshipster.com/method-swizzling/" target="_blank" rel="external">Method Swizzling</a>。</p>
</blockquote>
<p>在上周<a href="http://esoftmobile.com/2014/02/18/associated-objects/">associated objects</a>一文中，我们开始探索Objective-C运行时的一些黑魔法。本周我们继续前行，来讨论可能是最受争议的运行时技术：method swizzling。</p>
<hr>
<p>Method swizzling指的是改变一个已存在的选择器对应的实现的过程，它依赖于Objectvie-C中方法的调用能够在运行时进改变——通过改变类的调度表（dispatch table）中选择器到最终函数间的映射关系。</p>
<a id="more"></a>
<p>举个例子，假设我们想跟踪在一个iOS应用中每个视图控制器展现给用户的次数：</p>
<p>我们可以给每个视图控制器对应的<code>viewWillAppear:</code>实现方法中增加相应的跟踪代码，但是这样做会产生大量重复的代码。子类化可能是另一个选择，但要求你将<code>UIViewController</code>、 <code>UITableViewController</code>、 <code>UINavigationController</code> 以及所有其他视图控制器类都子类化，这也会导致代码重复。</p>
<p>幸好，还有另一个方法，在分类中进行<strong>method swizzling</strong>，下面来看怎么做：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">#import &lt;objc/runtime.h&gt;</div><div class="line"></div><div class="line">@implementation UIViewController (Tracking)</div><div class="line"></div><div class="line">+ (void)load &#123;</div><div class="line">    static dispatch_once_t onceToken;</div><div class="line">    dispatch_once(&amp;onceToken, ^&#123;</div><div class="line">        Class class = [self class];</div><div class="line"></div><div class="line">        // When swizzling a class method, use the following:</div><div class="line">        // Class class = object_getClass((id)self);</div><div class="line"></div><div class="line">        SEL originalSelector = @selector(viewWillAppear:);</div><div class="line">        SEL swizzledSelector = @selector(xxx_viewWillAppear:);</div><div class="line"></div><div class="line">        Method originalMethod = class_getInstanceMethod(class, originalSelector);</div><div class="line">        Method swizzledMethod = class_getInstanceMethod(class, swizzledSelector);</div><div class="line"></div><div class="line">        BOOL didAddMethod =</div><div class="line">            class_addMethod(class,</div><div class="line">                originalSelector,</div><div class="line">                method_getImplementation(swizzledMethod),</div><div class="line">                method_getTypeEncoding(swizzledMethod));</div><div class="line"></div><div class="line">        if (didAddMethod) &#123;</div><div class="line">            class_replaceMethod(class,</div><div class="line">                swizzledSelector,</div><div class="line">                method_getImplementation(originalMethod),</div><div class="line">                method_getTypeEncoding(originalMethod));</div><div class="line">        &#125; else &#123;</div><div class="line">            method_exchangeImplementations(originalMethod, swizzledMethod);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">#pragma mark - Method Swizzling</div><div class="line"></div><div class="line">- (void)xxx_viewWillAppear:(BOOL)animated &#123;</div><div class="line">    [self xxx_viewWillAppear:animated];</div><div class="line">    NSLog(@&quot;viewWillAppear: %@&quot;, self);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<blockquote>
<p>在计算机学科中，指针变换（<a href="http://en.wikipedia.org/wiki/Pointer_swizzling" target="_blank" rel="external">pointer swizzling</a>）是指将基于名字或位置的引用转变为直接的指针引用。 然而在Objective-C中，这个词的起源并不完全知道，但关于这一借鉴其实也很好理解，method swizzling可以通过选择器来改变它引用的函数指针。</p>
</blockquote>
<p>现在，当<code>UIViewController</code>或它子类的任何实例触发<code>viewWillAppear:</code>方法都会打印一条log日志。</p>
<p>向视图控制器的生命周期中注入操作、事件的响应、视图的绘制，或Foundation中的网络堆栈都是能够利用method swizzling产生明显效果的场景。还有一些其他的场景使用swizzling会是一个合适的选择，这随着Objective-C开发者经验不断丰富会变得越来越明显。</p>
<p>先不说为什么和在哪些地方使用swizzling，来看一下应该怎样实现：</p>
<h2 id="load-vs-initialize"><a href="#load-vs-initialize" class="headerlink" title="+load vs. +initialize"></a>+load vs. +initialize</h2><p><strong>Swizzling应该在<code>+load</code>方法中实现。</strong></p>
<p>每个类的这两个方法会被Objective-C运行时系统自动调用，<code>+load</code>是在一个类最开始加载时调用，<code>+initialize</code>是在应用中第一次调用该类或它的实例的方式之前调用。这两个方法都是可选的，只有实现了才会被执行。</p>
<p>因为method swizzling会影响全局，所以减少冒险情况就很重要。<code>+load</code>能够保证在类初始化的时候就会被加载，这为改变系统行为提供了一些统一性。但<code>+initialize</code>并不能保证在什么时候被调用——事实上也有可能永远也不会被调用，例如应用程序从未直接的给该类发送消息。</p>
<h2 id="dispatch-once"><a href="#dispatch-once" class="headerlink" title="dispatch_once"></a>dispatch_once</h2><p><strong>Swizzling应该在<code>dispatch_once</code>中实现。</strong></p>
<p>还是因为swizzling会改变全局，我们需要在运行时采取所有可用的防范措施。保障原子性就是一个措施，它确保代码即使在多线程环境下也只会被执行一次。GCD中的<code>diapatch_once</code>就提供这些保障，它应该被当做swizzling的标准实践。</p>
<h2 id="选择器、方法及实现"><a href="#选择器、方法及实现" class="headerlink" title="选择器、方法及实现"></a>选择器、方法及实现</h2><p>在Objective-C中，尽管这些词经常被放在一起来描述消息传递的过程，但选择器、方法及实现分别代表运行时的不同方面。</p>
<p>下面是苹果<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ObjCRuntimeRef/Reference/reference.html#//apple_ref/c/func/method_getImplementation" target="_blank" rel="external">Objective-C Runtime Reference</a>文档中对它们的描述：</p>
<ul>
<li><p>选择器（<code>typedef struct objc_selector *SEL</code>）：选择器用于表示一个方法在运行时的名字，一个方法的选择器是一个注册到（或映射到）Objective-C运行时中的C字符串，它是由编译器生成并在类加载的时候被运行时系统自动映射。</p>
</li>
<li><p>方法（<code>typedef struct objc_method *Method</code>）：一个代表类定义中一个方法的不明类型。</p>
</li>
<li><p>实现（<code>typedef id (*IMP)(id, SEL, ...)</code>）：这种数据类型是实现某个方法的函数开始位置的指针，函数使用的是基于当前CPU架构的标准C调用规约。第一个参数是指向self的指针（也就是该类的某个实例的内存空间，或者对于类方法来说，是指向元类（metaclass）的指针）。第二个参数是方法的选择器，后面跟的都是参数。</p>
</li>
</ul>
<p>理解这些概念之间关系最好的方式是：一个类（<code>Class</code>）维护一张调度表（dispatch table）用于解析运行时发送的消息；调度表中的每个实体（entry）都是一个方法（<code>Method</code>），其中key值是一个唯一的名字——选择器（<code>SEL</code>），它对应到一个实现（<code>IMP</code>）——实际上就是指向标准C函数的指针。</p>
<p>Method Swizzling就是改变类的调度表让消息解析时从一个选择器对应到另外一个的实现，同时将原始的方法实现混淆到一个新的选择器。</p>
<h2 id="调用-cmd"><a href="#调用-cmd" class="headerlink" title="调用_cmd"></a>调用_cmd</h2><p>下面这段代码看起来像是会导致一个死循环：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (void)xxx_viewWillAppear:(BOOL)animated &#123;</div><div class="line">    [self xxx_viewWillAppear:animated];</div><div class="line">    NSLog(@&quot;viewWillAppear: %@&quot;, NSStringFromClass([self class]));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但其实并没有，在Swizzling的过程中，<code>xxx_viewWillAppear:</code>会被重新分配给<code>UIViewController</code>的<code>-viewWillAppear:</code>的原始实现。一个优秀程序员应有的直觉会告诉你在一个方法的实现中通过<code>self</code>调用当前方法自身会产生错误，但是在当前这种情况下，如果我们记住到底是怎么回事更有意义。反而，如果我们在这个方法中调用<code>viewWillAppear:</code>才会真的导致死循环，因为这个方法的实现会在运行时被swizzle到<code>viewWillAppear:</code>的选择器。</p>
<blockquote>
<p>记住给swizzled方法加上前缀，这和你需要给可能产生冲突的分类方法加前缀是一个道理。</p>
</blockquote>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>Swizzling被普遍认为是一种巫术，容易导致不可预料的行为和结果。尽管不是最安全的，但是如果你采取下面这些措施，method swizzling还是很安全的。</p>
<ul>
<li><p><strong>始终调用方法的原始实现（除非你有足够的理由不这么做）：</strong> API为输入和输出提供规约，但它里面具体的实现其实是个黑匣子，在Method Swizzling过程中不调用它原始的实现可能会破坏一些私有状态，甚至是程序的其他部分。</p>
</li>
<li><p><strong>避免冲突：</strong>给分类方法加前缀，一定要确保不要让你代码库中其他代码（或是依赖库）在做与你相同的事。</p>
</li>
<li><p><strong>理解：</strong>只是简单的复制粘贴swizzling代码而不去理解它是怎么运行的，这不仅非常危险，而且还浪费了学习Objective-C运行时的机会。阅读 <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ObjCRuntimeRef/Reference/reference.html#//apple_ref/c/func/method_getImplementation" target="_blank" rel="external">Objective-C Runtime Reference</a> 和 <code>&lt;objc/rumtime.h&gt;</code> 去理解代码是怎样和为什么这样执行的，努力的用你的理解来消灭你的疑惑。</p>
</li>
<li><p><strong>谨慎行事：</strong>不管你多么自信你能够swizzling Foundation、UIKit 或者其他内置框架，请记住所有这些都可能在下一个版本中就不好使。提前做好准备，防范于未然才不至于到时候焦头乱额。</p>
</li>
</ul>
<blockquote>
<p>不敢放心大胆的直接使用Objective-C运行时？<a href="https://twitter.com/rentzsch" target="_blank" rel="external">Jonathan ‘Wolf’ Rentzsch</a>提供了经过实战检验的、支持CocoaPads的库<a href="https://github.com/rentzsch/jrswizzle" target="_blank" rel="external">JRSwizzle</a>，它会为你考虑好了一切。</p>
</blockquote>
<hr>
<p>与<a href="http://esoftmobile.com/2014/02/18/associated-objects/">associated objects</a>一样，method swizzling是一个强大的技术，但是你也应该谨慎使用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文翻译自&lt;a href=&quot;http://nshipster.com/&quot;&gt;NSHipster&lt;/a&gt;的文章&lt;a href=&quot;http://nshipster.com/method-swizzling/&quot;&gt;Method Swizzling&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在上周&lt;a href=&quot;http://esoftmobile.com/2014/02/18/associated-objects/&quot;&gt;associated objects&lt;/a&gt;一文中，我们开始探索Objective-C运行时的一些黑魔法。本周我们继续前行，来讨论可能是最受争议的运行时技术：method swizzling。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Method swizzling指的是改变一个已存在的选择器对应的实现的过程，它依赖于Objectvie-C中方法的调用能够在运行时进改变——通过改变类的调度表（dispatch table）中选择器到最终函数间的映射关系。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Objective-C" scheme="http://esoftmobile.com/tags/Objective-C/"/>
    
      <category term="runtime" scheme="http://esoftmobile.com/tags/runtime/"/>
    
  </entry>
  
  <entry>
    <title>Associated Objects</title>
    <link href="http://esoftmobile.com/2014/02/18/associated-objects/"/>
    <id>http://esoftmobile.com/2014/02/18/associated-objects/</id>
    <published>2014-02-18T01:38:25.000Z</published>
    <updated>2014-02-18T11:12:15.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文翻译自<a href="http://nshipster.com/" target="_blank" rel="external">NSHipster</a>的文章<a href="http://nshipster.com/associated-objects/" target="_blank" rel="external">Associated Objects</a>。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#import &lt;objc/runtime.h&gt;</div></pre></td></tr></table></figure>
<p>Objective-C开发者在遇到上面这条“咒语”相关的一些东西时，会不自觉的变的非常谨慎。一个主要原因是：弄乱Objective-C运行时可能会改变整个实现结构，因为所有的代码都是运行在它之上的。</p>
<p>一方面：<code>&lt;objc/runtime.h&gt;</code>中的函数可以给应用或者框架增加强大的新特性，这是通过其他方式不可能做到的。但另一方面：它会改变代码的正常运行逻辑和所有与之交互的东西（通常伴随着可怕的副作用）。</p>
<p>因而，这是我们认为进行这种魔鬼交易最大的恐惧点，下面来看一个NSHipster读者问得最多的一个主题：associated objects。<br><a id="more"></a></p>
<hr>
<p>Associated Objects（关联对象）或者叫作关联引用（Associative References），是作为Objective-C 2.0 运行时功能被引入到 Mac OS X 10.6 Snow Leopard（及iOS4）系统。与它相关在<code>&lt;objc/runtime.h&gt;</code>中有3个C函数，它们可以让对象在运行时关联任何值：</p>
<ul>
<li><code>objc_setAssociatedObject</code></li>
<li><code>objc_getAssociatedObject</code></li>
<li><code>objc_removeAssociatedObjects</code></li>
</ul>
<p>为什么这几个方法很有用呢？因为开发者可以通过它们<strong>在分类中给已存在的类中添加自定义属性</strong>。</p>
<h4 id="NSObject-AssociatedObject-h"><a href="#NSObject-AssociatedObject-h" class="headerlink" title="NSObject+AssociatedObject.h"></a>NSObject+AssociatedObject.h</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@interface NSObject (AssociatedObject)</div><div class="line">@property (nonatomic, strong) id associatedObject;</div><div class="line">@end</div></pre></td></tr></table></figure>
<h4 id="NSObject-AssociatedObject-m"><a href="#NSObject-AssociatedObject-m" class="headerlink" title="NSObject+AssociatedObject.m"></a>NSObject+AssociatedObject.m</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@implementation NSObject (AssociatedObject)</div><div class="line">@dynamic associatedObject;</div><div class="line"></div><div class="line">- (void)setAssociatedObject:(id)object &#123;</div><div class="line">     objc_setAssociatedObject(self, @selector(associatedObject), object, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (id)associatedObject &#123;</div><div class="line">    return objc_getAssociatedObject(self, @selector(associatedObject));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通常推荐key使用<code>static char</code>类型——使用指针或许更好，key值是一个唯一的常量，并只在getters和setters方法内部使用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">static char kAssociatedObjectKey;</div><div class="line"></div><div class="line">objc_getAssociatedObject(self, &amp;kAssociatedObjectKey);</div></pre></td></tr></table></figure>
<p>然而，一个更简单的方案是：直接使用选择器（selector）。</p>
<blockquote>
<p>因为SEL生成的时候就是一个唯一的常量，你可以使用 _cmd 作为objc_setAssociatedObject()的key。  </p>
<p>—— Bill Bumgarner(@bbum) <a href="https://twitter.com/bbum/statuses/3609098005" target="_blank" rel="external">August28, 2009</a></p>
</blockquote>
<h2 id="关联对象的特性"><a href="#关联对象的特性" class="headerlink" title="关联对象的特性"></a>关联对象的特性</h2><p>被关联到对象的值根据使用的<code>objc_AssociationPolicy</code>类型不同表现出不同的特性：</p>
<table>
<thead>
<tr>
<th>Behavior</th>
<th>对应的@property类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>OBJC_ASSOCIATION_ASSIGN</td>
<td>@property (assign) 或 @property(unsafe_unretained)</td>
<td>给关联对象指定若引用</td>
</tr>
<tr>
<td>OBJC_ASSOCIATION_RETAIN_NONATOMIC</td>
<td>@property (nonatomic, strong)</td>
<td>给关联对象指定非原子的强引用</td>
</tr>
<tr>
<td>OBJC_ASSOCIATION_COPY_NONATOMIC</td>
<td>@property (nonatomic, copy)</td>
<td>给关联对象指定非原子的copy特性</td>
</tr>
<tr>
<td>OBJC_ASSOCIATION_RETAIN</td>
<td>@property (atomic, strong)</td>
<td>给关联对象指定原子的强引用</td>
</tr>
<tr>
<td>OBJC_ASSOCIATION_COPY</td>
<td>@property (atomic, copy)</td>
<td>给关联对象指定原子copy特性</td>
</tr>
</tbody>
</table>
<p>通过<code>OBJC_ASSOCIATION_ASSIGN</code>分配的弱关联对象并不是完全和<code>weak</code>修饰符引用一样（对象初始化与释放时被置空），反而更像是<code>unsafe_unretained</code>，所以你需要在访问弱关联对象时稍微注意一下。</p>
<blockquote>
<p>根据<a href="https://developer.apple.com/videos/wwdc/2011/#322-video" target="_blank" rel="external">WWDC2011,Session322</a>对对象释放时间的描述，associated objects清除在对象生命周期中很晚才执行，通过被<code>NSObject -dealloc</code>方法调用的<code>object_dispose()</code>函数完成。</p>
</blockquote>
<h2 id="移除关联对象"><a href="#移除关联对象" class="headerlink" title="移除关联对象"></a>移除关联对象</h2><p>一个的方法是试图在某个时刻调用<code>objc_removeAssociatedObjects()</code>函数来移除关联对象，然而，根据苹果<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ObjCRuntimeRef/Reference/reference.html#//apple_ref/c/func/objc_removeAssociatedObjects" target="_blank" rel="external">文档</a>描述，你不大可能有需求要自己去调用：</p>
<blockquote>
<p>这个函数的主要目的是很容易的让对象恢复成它“原始状态”，你不应该使用它来移除关联的对象，因为它也会移除掉包括其他地方加入的全部的关联对象。所以一般你只需要通过调用<code>objc_setAssociatedObject</code>并传入nil值来清除关联值。</p>
</blockquote>
<h2 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h2><ul>
<li><p><strong>添加私有变量来帮助实现细节</strong> 。当拓展一个内置类时，可能有必要跟踪一些额外的状态，这是关联对象最普遍的应用场景。例如：AFNetworking中在<code>UIImageView</code>的分类中使用关联对象来存储一个请求操作对象（operation object），用于异步的从远程获取图片。</p>
</li>
<li><p><strong>添加公共属性来设置分类的特性</strong> 。有时候，通过添加一个属性让一个分类更加灵活，而不是作为函数参数。这种情况下，使用关联对象作为一个公开的属性是可接受的解决方案。还是拿前面AFNetworking的例子来说，<code>UIImageView</code>的分类中<code>imageResponseSerializer</code>属性允许图片视图随意的使用一个过滤器，或者在图片请求并缓存之前就可以修改它的渲染。</p>
</li>
<li><p><strong>为KVO创建一个关联的观察者（observer）</strong>。当在一个分类中使用<a href="http://nshipster.com/key-value-observing/" target="_blank" rel="external">KVO</a>的时候，推荐使用一个自定义的关联对象作为观察者，而不是对象自己观察自己。</p>
</li>
</ul>
<h2 id="反模式"><a href="#反模式" class="headerlink" title="反模式"></a>反模式</h2><ul>
<li><p><strong>在不必要的时候使用关联对象</strong>。使用视图时一个常见的情况是通过数据模型或一些复合的值来创建一个便利的方法设置填充字段或属性。如果这些值在后面不会再被使用到，最好就不要使用关联对象了。</p>
</li>
<li><p><strong>使用关联对象来保存一个可以被推算出来的值</strong>。例如，有人可能想通过关联对象存储<code>UITableViewCell</code>上一个自定义accessoryView的引用，使用<code>tableView:accessoryButtonTappedForRowWithIndexPath:</code> 和 <code>cellForRowAtIndexPath:</code>即可以达到要求。</p>
</li>
<li><p><strong>使用关联对象来代替X</strong>。其中X代表下面的一些项：</p>
<ul>
<li><a href="https://developer.apple.com/library/ios/documentation/cocoa/conceptual/ProgrammingWithObjectiveC/CustomizingExistingClasses/CustomizingExistingClasses.html" target="_blank" rel="external">子类化</a>，当使用继承比使用组合更合适的时候。</li>
<li><a href="https://developer.apple.com/library/ios/documentation/general/conceptual/Devpedia-CocoaApp/TargetAction.html" target="_blank" rel="external">Target-Action</a>给响应者添加交互事件。</li>
<li><a href="https://developer.apple.com/library/ios/documentation/EventHandling/Conceptual/EventHandlingiPhoneOS/GestureRecognizer_basics/GestureRecognizer_basics.html" target="_blank" rel="external">手势识别</a>，当target-action模式不够用的时候。</li>
<li><a href="https://developer.apple.com/library/ios/documentation/general/conceptual/DevPedia-CocoaCore/Delegation.html" target="_blank" rel="external">代理</a>，当事件可以委托给其他对象。</li>
<li><a href="http://nshipster.com/nsnotification-and-nsnotificationcenter/" target="_blank" rel="external">消息 &amp; 消息中心</a>使用低耦合的方式来广播消息。</li>
</ul>
</li>
</ul>
<hr>
<p>关联对象应该被当做最后的手段来使用（不得不用时才用），而不是为了寻求一个解决方案就行（事实上，分类本身就不应该是解决问题优先选择的工具）。</p>
<p>像一些巧妙的伎俩、hack手段或者是变通的解决方案，人们总是倾向于创造机会来使用他们——特别是刚刚接触他们时。尽可能的在理解并领悟之后再做出正确的方案，避免自己陷入一知半解的尴尬处境。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文翻译自&lt;a href=&quot;http://nshipster.com/&quot;&gt;NSHipster&lt;/a&gt;的文章&lt;a href=&quot;http://nshipster.com/associated-objects/&quot;&gt;Associated Objects&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;#import &amp;lt;objc/runtime.h&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Objective-C开发者在遇到上面这条“咒语”相关的一些东西时，会不自觉的变的非常谨慎。一个主要原因是：弄乱Objective-C运行时可能会改变整个实现结构，因为所有的代码都是运行在它之上的。&lt;/p&gt;
&lt;p&gt;一方面：&lt;code&gt;&amp;lt;objc/runtime.h&amp;gt;&lt;/code&gt;中的函数可以给应用或者框架增加强大的新特性，这是通过其他方式不可能做到的。但另一方面：它会改变代码的正常运行逻辑和所有与之交互的东西（通常伴随着可怕的副作用）。&lt;/p&gt;
&lt;p&gt;因而，这是我们认为进行这种魔鬼交易最大的恐惧点，下面来看一个NSHipster读者问得最多的一个主题：associated objects。&lt;br&gt;
    
    </summary>
    
    
      <category term="Objective-C" scheme="http://esoftmobile.com/tags/Objective-C/"/>
    
      <category term="runtime" scheme="http://esoftmobile.com/tags/runtime/"/>
    
  </entry>
  
  <entry>
    <title>iOS安全系列汇总</title>
    <link href="http://esoftmobile.com/2014/02/14/ios-security/"/>
    <id>http://esoftmobile.com/2014/02/14/ios-security/</id>
    <published>2014-02-14T07:32:15.000Z</published>
    <updated>2014-04-07T16:01:50.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>感谢各位作者： <a href="http://weibo.com/n/hangcom2010?from=feed&amp;loc=at" target="_blank" rel="external">@hangcom2010</a>、<a href="http://weibo.com/wufawei" target="_blank" rel="external">@吴发伟Ted</a>、<a href="http://weibo.com/2js3" target="_blank" rel="external">@拓词Joey</a>、<a href="http://weibo.com/xixiflower" target="_blank" rel="external">@程序媛念茜</a>。</p>
</blockquote>
<a id="more"></a>
<h2 id="iOS应用逆向工程"><a href="#iOS应用逆向工程" class="headerlink" title="iOS应用逆向工程"></a>iOS应用逆向工程</h2><p>知乎专栏：</p>
<ul>
<li><a href="http://zhuanlan.zhihu.com/iOSRe/19645980" target="_blank" rel="external">iOS安全开发者眼中的越狱iPhone安全性</a></li>
<li><a href="http://zhuanlan.zhihu.com/iOSRe/19646002" target="_blank" rel="external">iOS安全开发防护摘要</a></li>
<li><a href="http://zhuanlan.zhihu.com/iOSRe/19646016" target="_blank" rel="external">Reveal查看任意app的高级技巧</a></li>
</ul>
<p>书籍推荐：</p>
<ul>
<li><a href="http://www.amazon.cn/iOS应用逆向工程-分析与实战-沙梓社/dp/B00HQW9AA6/ref=sr_1_1?ie=UTF8&amp;qid=1392363628&amp;sr=8-1&amp;keywords=ios逆向工程" target="_blank" rel="external">《iOS应用逆向工程:分析与实战》</a></li>
</ul>
<h2 id="iOS越狱程序开发"><a href="#iOS越狱程序开发" class="headerlink" title="iOS越狱程序开发"></a>iOS越狱程序开发</h2><ol>
<li><a href="http://wufawei.com/2013/08/iOS-jailbroken-programming-1/" target="_blank" rel="external">工具篇</a></li>
<li><a href="http://wufawei.com/2013/08/iOS-jailbroken-programming-2/" target="_blank" rel="external">构建和部署</a></li>
<li><a href="http://wufawei.com/2013/08/iOS-jailbroken-programming-3/" target="_blank" rel="external">Your First Tweak</a></li>
<li><p><a href="http://wufawei.com/2013/08/iOS-jailbroken-programming-4/" target="_blank" rel="external">总结</a></p>
<hr>
</li>
</ol>
<ul>
<li><a href="http://joeyio.com/ios/2014/01/01/make-a-mobile-substrate-tweak-using-theos/" target="_blank" rel="external">使用Theos做一个简单的Mobile Substrate Tweak</a></li>
</ul>
<h2 id="iOS应用程序安全"><a href="#iOS应用程序安全" class="headerlink" title="iOS应用程序安全"></a>iOS应用程序安全</h2><ol>
<li><a href="http://wufawei.com/2013/11/ios-application-security-1/" target="_blank" rel="external">搭建移动渗透测试平台</a></li>
<li><a href="http://wufawei.com/2013/11/ios-application-security-2/" target="_blank" rel="external">获得iOS应用程序的类信息</a></li>
<li><a href="http://wufawei.com/2013/11/ios-application-security-3/" target="_blank" rel="external">理解Objective-C Runtime</a></li>
<li><a href="http://wufawei.com/2013/11/ios-application-security-4/" target="_blank" rel="external">用Cycript进行运行时分析(Yahoo天气应用)</a></li>
<li><a href="http://wufawei.com/2013/11/ios-application-security-5/" target="_blank" rel="external">用Cycript做运行时分析的高级技巧(Yahoo天气应</a></li>
<li><a href="http://wufawei.com/2013/11/ios-application-security-6/" target="_blank" rel="external">iOS 7的新安全功能</a></li>
<li><a href="http://wufawei.com/2013/11/ios-application-security-7/" target="_blank" rel="external">不用证书安装应用到设备的方法</a></li>
<li><a href="http://wufawei.com/2013/11/ios-application-security-8/" target="_blank" rel="external">用Cycript进行Method Swizzling</a></li>
<li><a href="http://wufawei.com/2013/11/ios-application-security-9/" target="_blank" rel="external">用Snoop-it分析iOS应用的安全</a></li>
<li><a href="http://wufawei.com/2013/11/ios-application-security-10/" target="_blank" rel="external">iOS文件系统和取证</a></li>
<li><a href="http://wufawei.com/2013/11/ios-application-security-11/" target="_blank" rel="external">分析使用HTTP/HTTPS的网络流量</a></li>
<li><a href="http://wufawei.com/2013/11/ios-application-security-12/" target="_blank" rel="external">导出Keychain数据</a></li>
<li><a href="http://wufawei.com/2013/11/ios-application-security-13/" target="_blank" rel="external">使用Sogeti Data Protection tools启动定制的Ramdisk</a></li>
<li><a href="http://wufawei.com/2013/11/ios-application-security-14/" target="_blank" rel="external">使用Sogeti Data Protection tools收集信息</a></li>
<li><a href="http://wufawei.com/2013/11/ios-application-security-15/" target="_blank" rel="external">使用iNalyzer对iOS应用进行静态分析</a></li>
<li><a href="http://wufawei.com/2013/11/ios-application-security-16/" target="_blank" rel="external">使用iNalyzer对iOS应用进行动态分析</a></li>
<li><a href="http://wufawei.com/2013/11/ios-application-security-17/" target="_blank" rel="external">使用Introspy对iOS应用进行黑盒测试</a></li>
<li><a href="http://wufawei.com/2013/11/ios-application-security-18/" target="_blank" rel="external">使用Introspy检测自定义签名</a></li>
<li><a href="http://wufawei.com/2013/11/ios-application-security-19/" target="_blank" rel="external">在程序中使用Introspy</a></li>
<li><a href="http://wufawei.com/2013/11/ios-application-security-20/" target="_blank" rel="external">本地数据存储及其安全性（NSUserDefaults, CoreData, Sqlite, Plist 文件）</a></li>
<li><a href="http://wufawei.com/2013/11/ios-application-security-21/" target="_blank" rel="external">ARM和GDB基础</a></li>
<li><a href="http://wufawei.com/2013/11/ios-application-security-22/" target="_blank" rel="external">使用GDB进行运行时分析和操作</a></li>
<li><a href="http://wufawei.com/2013/11/ios-application-security-23/" target="_blank" rel="external">对抗运行时分析和操作</a></li>
<li><a href="http://wufawei.com/2013/11/ios-application-security-24/" target="_blank" rel="external">越狱检测与绕过</a></li>
<li><a href="http://wufawei.com/2013/11/ios-application-security-25/" target="_blank" rel="external">iOS开发安全编程实践</a></li>
<li><a href="http://wufawei.com/2013/12/ios-application-security-26/" target="_blank" rel="external">使用IDA Pro给iOS应用打补丁</a></li>
<li><a href="http://wufawei.com/2013/11/ios-application-security-summary/" target="_blank" rel="external">简要总结</a></li>
</ol>
<h2 id="iOS安全攻防"><a href="#iOS安全攻防" class="headerlink" title="iOS安全攻防"></a>iOS安全攻防</h2><ol>
<li><a href="http://blog.csdn.net/yiyaaixuexi/article/details/8288077" target="_blank" rel="external">Hack必备的命令与工具</a></li>
<li><a href="http://blog.csdn.net/yiyaaixuexi/article/details/8293020" target="_blank" rel="external">后台daemon非法窃取用户iTunesstore信息</a></li>
<li><a href="http://blog.csdn.net/yiyaaixuexi/article/details/18220875" target="_blank" rel="external">使用Reveal分析他人app</a></li>
<li><a href="http://blog.csdn.net/yiyaaixuexi/article/details/18222339" target="_blank" rel="external">阻止GDB依附</a></li>
<li><a href="http://blog.csdn.net/yiyaaixuexi/article/details/18317819" target="_blank" rel="external">使用Cycript修改支付宝app运行时</a></li>
<li><a href="http://blog.csdn.net/yiyaaixuexi/article/details/18353423" target="_blank" rel="external">使用class-dump-z分析支付宝app</a></li>
<li><a href="http://blog.csdn.net/yiyaaixuexi/article/details/18358029" target="_blank" rel="external">Hack实战——解除支付宝app手势解锁错误次数限制</a></li>
<li><a href="http://blog.csdn.net/yiyaaixuexi/article/details/18402001" target="_blank" rel="external">键盘缓存与安全键盘</a></li>
<li><a href="http://blog.csdn.net/yiyaaixuexi/article/details/18404343" target="_blank" rel="external">使用Keychain-Dumper导出keychain数据</a></li>
<li><a href="http://blog.csdn.net/yiyaaixuexi/article/details/18454691" target="_blank" rel="external">二进制和资源文件自检</a></li>
<li><a href="http://blog.csdn.net/yiyaaixuexi/article/details/18520053" target="_blank" rel="external">Hack实战——探究支付宝app手势密码</a></li>
<li><a href="http://blog.csdn.net/yiyaaixuexi/article/details/18657179" target="_blank" rel="external">iOS7的动态库注入</a></li>
<li><a href="http://blog.csdn.net/yiyaaixuexi/article/details/18669201" target="_blank" rel="external">数据擦除</a></li>
<li><a href="http://blog.csdn.net/yiyaaixuexi/article/details/18817667" target="_blank" rel="external">Hack实战——支付宝app手势密码校验欺骗</a></li>
<li><a href="http://blog.csdn.net/yiyaaixuexi/article/details/18968125" target="_blank" rel="external">使用iNalyzer分析应用程序</a></li>
<li><a href="http://blog.csdn.net/yiyaaixuexi/article/details/18985131" target="_blank" rel="external">使用introspy追踪分析应用程序</a></li>
<li><a href="http://blog.csdn.net/yiyaaixuexi/article/details/19094765" target="_blank" rel="external">Fishhook</a></li>
<li><a href="http://blog.csdn.net/yiyaaixuexi/article/details/19486335" target="_blank" rel="external">数据保护API</a></li>
<li><a href="http://blog.csdn.net/yiyaaixuexi/article/details/19642621" target="_blank" rel="external">基于脚本实现动态库注入</a></li>
<li><a href="http://blog.csdn.net/yiyaaixuexi/article/details/20286929" target="_blank" rel="external">越狱检测的攻与防</a></li>
<li><a href="http://blog.csdn.net/yiyaaixuexi/article/details/20391001" target="_blank" rel="external">废除应用程序的ASLR特性</a></li>
<li><a href="http://blog.csdn.net/yiyaaixuexi/article/details/21469769" target="_blank" rel="external">static和被裁的符号表</a></li>
</ol>
<h2 id="苹果关于安全的文档"><a href="#苹果关于安全的文档" class="headerlink" title="苹果关于安全的文档"></a>苹果关于安全的文档</h2><ol>
<li><a href="https://developer.apple.com/library/ios/documentation/Security/Conceptual/Security_Overview/" target="_blank" rel="external">Security Overview</a></li>
<li><a href="https://developer.apple.com/library/ios/documentation/Security/Conceptual/SecureCodingGuide/" target="_blank" rel="external">Secure Coding Guide</a></li>
<li><a href="http://images.apple.com/ipad/business/docs/iOS_Security_Feb14.pdf" target="_blank" rel="external">iOS Security</a></li>
<li><a href="https://developer.apple.com/library/ios/documentation/Security/Conceptual/cryptoservices/Introduction/Introduction.html#//apple_ref/doc/uid/TP40011172" target="_blank" rel="external">Cryptographic Services Guide</a></li>
<li><a href="https://developer.apple.com/library/ios/documentation/Security/Reference/secureTransportRef/Reference/reference.html#//apple_ref/doc/uid/TP30000155" target="_blank" rel="external">Secure Transport Reference</a></li>
<li><a href="https://developer.apple.com/library/ios/documentation/Networking/Conceptual/CFNetwork/Introduction/Introduction.html#//apple_ref/doc/uid/TP30001132" target="_blank" rel="external">CFNetwork Programming Guide</a></li>
<li><a href="https://developer.apple.com/library/ios/documentation/Security/Reference/certifkeytrustservices/Reference/reference.html#//apple_ref/doc/uid/TP30000157" target="_blank" rel="external">Certificate, Key, and Trust Services Reference</a></li>
<li><a href="https://developer.apple.com/library/ios/documentation/Security/Conceptual/CertKeyTrustProgGuide/01introduction/introduction.html#//apple_ref/doc/uid/TP40001358" target="_blank" rel="external">Certificate, Key, and Trust Services Programming Guide</a></li>
<li><a href="https://developer.apple.com/library/ios/documentation/Security/Reference/keychainservices/Reference/reference.html#//apple_ref/doc/uid/TP30000898" target="_blank" rel="external">Keychain Services Reference</a></li>
<li><a href="https://developer.apple.com/library/ios/documentation/Security/Conceptual/keychainServConcepts/01introduction/introduction.html#//apple_ref/doc/uid/TP30000897" target="_blank" rel="external">Keychain Services Programming Guide</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;感谢各位作者： &lt;a href=&quot;http://weibo.com/n/hangcom2010?from=feed&amp;amp;loc=at&quot;&gt;@hangcom2010&lt;/a&gt;、&lt;a href=&quot;http://weibo.com/wufawei&quot;&gt;@吴发伟Ted&lt;/a&gt;、&lt;a href=&quot;http://weibo.com/2js3&quot;&gt;@拓词Joey&lt;/a&gt;、&lt;a href=&quot;http://weibo.com/xixiflower&quot;&gt;@程序媛念茜&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Clear Xcode</title>
    <link href="http://esoftmobile.com/2014/01/17/clear-xcode-files/"/>
    <id>http://esoftmobile.com/2014/01/17/clear-xcode-files/</id>
    <published>2014-01-17T03:25:00.000Z</published>
    <updated>2014-01-17T03:42:09.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Archives</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">~/Library/Developer/Xcode/Archives</div><div class="line">```	</div><div class="line"></div><div class="line">**DerivedData**</div></pre></td></tr></table></figure>
<p>~/Library/Developer/Xcode/DerivedData<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;!-- more --&gt;</div><div class="line">	</div><div class="line">**Device Logs, Screenshots**</div></pre></td></tr></table></figure></p>
<p>~/Library/Developer/Xcode/iOS Device Logs</p>
<p>~/Library/Developer/Xcode/Snapshots<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">**Old Device Information**</div></pre></td></tr></table></figure></p>
<p>~/Library/Developer/Xcode/iOS DeviceSupport/<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">	</div><div class="line">**Slmulator Apps**</div></pre></td></tr></table></figure></p>
<p>~/Library/Application Support/iPhone Simulator<br>```</p>
<p>links:<br><a href="http://blog.favo.org/post/31649090293/xcode-5-places-to-save-some-disk-space" target="_blank" rel="external">http://blog.favo.org/post/31649090293/xcode-5-places-to-save-some-disk-space</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Archives&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;lin
    
    </summary>
    
    
      <category term="Xcode" scheme="http://esoftmobile.com/tags/Xcode/"/>
    
      <category term="Notes" scheme="http://esoftmobile.com/tags/Notes/"/>
    
  </entry>
  
  <entry>
    <title>统一设计，iOS6也玩扁平化</title>
    <link href="http://esoftmobile.com/2014/01/14/build-ios6-ios7-apps/"/>
    <id>http://esoftmobile.com/2014/01/14/build-ios6-ios7-apps/</id>
    <published>2014-01-14T03:14:55.000Z</published>
    <updated>2014-01-17T03:37:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>##前言</p>
<p>前段时间，苹果在它的<a href="https://developer.apple.com/support/appstore/" target="_blank" rel="external">开发者网站</a>上放出了iOS系统安装比例，其中iOS7占到78%，iOS6占18%，剩余4%是iOS6以下版本。我们也借此机会将手上正在进行的两个项目都升级到支持iOS6及以上版本呢，有一种幸福来的太突然的赶脚，要知道在此之前我们都还在支持iOS4.3版本。</p>
<a id="more"></a>
<p><img src="/image/ios-rate.png" alt="iOS Usage Chart"></p>
<p>根据苹果另外一条<a href="https://developer.apple.com/news/?id=12172013a" target="_blank" rel="external">消息</a>，我们需要按照iOS7风格设计我们的Apps，至于iOS6系统，也没有必要为这部分用户做两份设计，尽量向iOS7风格靠齐吧。由于iOS7简约的风格，基本上通过设置组件的颜色就能够满足大部分色设计需求，所以本文的主要内容会讲iOS6实现iOS7扁平化的一些技巧。</p>
<p><img src="/image/ios7-update-announcement.png" alt="Announcement"></p>
<p>##iOS6扁平化</p>
<p>这部分我们主要讲解在iOS6上实现扁平化，各个控制怎么设置。并且大部分通过各个控件 <code>UIAppearance</code> 协议做全局性的设置。</p>
<p>###辅助</p>
<p>我们通常要判断不同的系统版本，我是通过下面的宏进行判断的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#define IOS7_OR_LATER ([[[UIDevice currentDevice] systemVersion] compare:@&quot;7.0&quot;] != NSOrderedAscending)</div></pre></td></tr></table></figure>
<p>由于很多地方iOS7可以直接设置颜色，而iOS6却只能设置图片，所以可以使用下面方法直接通过颜色生成一个纯色的图片：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">+ (UIImage *)imageWithColor:(UIColor *)color size:(CGSize)size</div><div class="line">&#123;</div><div class="line">    CGRect rect = CGRectMake(0, 0, size.width, size.height);</div><div class="line">    UIGraphicsBeginImageContext(rect.size);</div><div class="line">    CGContextRef context = UIGraphicsGetCurrentContext();</div><div class="line">    </div><div class="line">    CGContextSetFillColorWithColor(context, [color CGColor]);</div><div class="line">    CGContextFillRect(context, rect);</div><div class="line">    </div><div class="line">    UIImage *image = UIGraphicsGetImageFromCurrentImageContext();</div><div class="line">    UIGraphicsEndImageContext();</div><div class="line">    return image;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###布局</p>
<p>iOS7中界面会从屏幕的(0, 0)点开始绘制，所以默认情况下你的内容通常会和 statusBar 和 navigationBar 冲突，如果为了省事的话，或者你的 NavigationBar 和 TabBar压根儿就不透明，那你可以直接给 viewController 的 <code>edgesForExtendedLayout</code> 属性值为：UIRectEdgeNone。当然你如果想体现iOS7内容为主的风格，也想将内容显示在半透明的 Bar 下，那你可以严格判断系统版本调整布局了。通常建议将 <code>edgesForExtendedLayout</code> 设置为 UIRectEdgeBottom，这样如果ViewController中为 tableView 或 scrollView 时，内容可以显示到半透明的 tabBar 下，工作量也不是很大。</p>
<p>###UINavigationBar</p>
<p>在iOS7风格中，导航栏通常是一个纯色的背景颜色，直接设置 <code>barTintColor</code> 就行，而iOS6中，给导航栏设置 <code>tintColor</code>，系统也会默认加上渐变，不够扁平，所以只能设置背景图片了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//iOS6</div><div class="line">[[UINavigationBar appearance] setBackgroundImage:[UIImage imageWithColor:navigationBarColor size:CGSizeMake(1, 44)]</div><div class="line">	forBarMetrics:UIBarMetricsDefault];</div></pre></td></tr></table></figure>
<p>导航栏 <code>title</code> 的颜色也不同，iOS7默认为黑色，而iOS6默认为白色，而且字体大小也不一样，所以还是统一设置标题字体大小、颜色，并去掉文字阴影：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//Universal</div><div class="line">[[UINavigationBar appearance] setTitleTextAttributes:</div><div class="line">        @&#123; NSForegroundColorAttributeName: [UIColor whiteColor],</div><div class="line">           NSFontAttributeName: [UIFont boldSystemFontOfSize:20],</div><div class="line">           UITextAttributeTextShadowOffset: [NSValue valueWithUIOffset:UIOffsetZero]&#125;];</div></pre></td></tr></table></figure>
<p>iOS7中导航栏上的按钮已经不被圆角按钮包围了，而iOS6中不管你怎么设置 UIBarButtonItem 的 <code>style</code> 属性都去不掉讨厌的 border，可能很多人会想通过创建 CustomView 类型的 button，其实不用那么麻烦：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//iOS6</div><div class="line">[[UIBarButtonItem appearance] setBackgroundImage:[UIImage new]</div><div class="line">	forState:UIControlStateNormal</div><div class="line">	barMetrics:UIBarMetricsDefault];</div></pre></td></tr></table></figure>
<p>可以看看完成上面三步达到的效果：</p>
<p><img src="/image/ios6-navigationbar.png" alt="iOS6"> <img src="/image/ios7-navigationbar.png" alt="iOS7"></p>
<p>有人会说，你别高兴得太早，那导航栏的返回按钮怎么办？能去掉iOS6上带剪头和圆角的border吗？这个都搞不定，我还敢在这儿发文章显摆吗？看码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//iOS6</div><div class="line">[[UIBarButtonItem appearance] setBackButtonBackgroundImage:[[UIImage imageNamed:@&quot;buttonItem_back&quot;] resizableImageWithCapInsets:UIEdgeInsetsMake(0, 18, 0, 0)]</div><div class="line">	forState:UIControlStateNormal</div><div class="line">	barMetrics:UIBarMetricsDefault];</div><div class="line"></div><div class="line">[[UIBarButtonItem appearance] setBackButtonTitlePositionAdjustment:UIOffsetMake(5, 0)</div><div class="line">	forBarMetrics:UIBarMetricsDefault];</div><div class="line">        </div><div class="line">[[UIBarButtonItem appearance] setTitleTextAttributes:</div><div class="line">         @&#123; UITextAttributeFont: [UIFont systemFontOfSize:17],</div><div class="line">            UITextAttributeTextShadowOffset: [NSValue valueWithUIOffset:UIOffsetZero]&#125; forState:UIControlStateNormal];</div></pre></td></tr></table></figure>
<p>第一段代码给返回按钮设置一个背景图片，当然这个背景图片就做成和iOS7返回按钮那个剪头一样就好了， <img src="/image/ios7-back-button.png" alt="Back"> 可能文字和剪头靠的太紧，没关系，通过 <code>setBackButtonTitlePositionAdjustment:</code> 设置一下文字的偏移就好了，最后因为iOS6中 BarButtonItem 中的文字比 iOS7 小，所以统一设置一下吧。</p>
<p><img src="/image/ios6-back-item.png" alt="iOS6"> <img src="/image/ios7-back-item.png" alt="iOS7"></p>
<p>###UITabBar</p>
<p>和 NavigationBar 一样，iOS6中给 TabBar 设置 <code>tintColor</code> 也不够扁平，还是老老实实设置背景图片，并去掉 Tab 选中时的高光效果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//iOS6</div><div class="line">[[UITabBar appearance] setBackgroundImage:[UIImage imageWithColor:RGB(245, 245, 245) size:CGSizeMake(1, 49)]];</div><div class="line"></div><div class="line">[[UITabBar appearance] setSelectionIndicatorImage:[UIImage new]];</div></pre></td></tr></table></figure>
<p>iOS6中 Tab 选中后，图片默认会加上高光效果，title默认为白色，而iOS7中默认为选中后图片和文字默认都变为 TabBar 的 tintColor 颜色，所以这里的处理方法是准备两套 tabBarItem 的图标，默认状态和选中状态，iOS7直接调用<code>initWithTitle: image: selectedImage:</code>方法初始化 tabBarItem，iOS6在初始化后，再通过 <code>setFinishedSelectedImage: withFinishedUnselectedImage:</code>方法设置默认状态和选中状态下的图标，我通常会给 <code>UITabBarItem</code> 增加一个分类，新增一个统一的初始化方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">@implementation UITabBarItem (Universal)</div><div class="line">+ (instancetype)itemWithTitle:(NSString *)title image:(UIImage *)image selectedImage:(UIImage *)selectedImage</div><div class="line">&#123;</div><div class="line">    UITabBarItem *tabBarItem = nil;</div><div class="line">    if (IOS7_OR_LATER) &#123;</div><div class="line">        tabBarItem = [[UITabBarItem alloc] initWithTitle:title image:image selectedImage:selectedImage];</div><div class="line">    &#125; else &#123;</div><div class="line">        tabBarItem = [[UITabBarItem alloc] initWithTitle:title image:nil tag:0];</div><div class="line">        [tabBarItem setFinishedSelectedImage:selectedImage withFinishedUnselectedImage:image];</div><div class="line">    &#125;</div><div class="line">    return tabBarItem;</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>标题单独设置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//iOS6</div><div class="line">[[UITabBarItem appearance] setTitleTextAttributes:</div><div class="line">            @&#123; UITextAttributeTextShadowOffset: [NSValue valueWithUIOffset:UIOffsetMake(0, 0)],</div><div class="line">               UITextAttributeTextColor: tabBarTintColor &#125;</div><div class="line">	forState:UIControlStateSelected];</div></pre></td></tr></table></figure>
<p><img src="/image/ios6-tabbar.png" alt="iOS6"> <img src="/image/ios7-tabbar.png" alt="iOS7"></p>
<p>###UIToolbar</p>
<p>UIToolbar 和 UINavigationBar 相似，建议通过设置背景图片，上面的 item 和 NavigationBar 的 item 设置通用。</p>
<p>###UISegmentControl</p>
<p>像 UISegmentControl 通过自定义或者第三方控件，很容易实现 iOS6 和 iOS7 一致风格，如果你就想用系统的控件让 iOS6 实现 iOS7 的风格也不是没有办法。我们可以设置 segment 部分选中状态和非选中状态下的背景图片，segment 之间的分割线图片。因为 iOS6 上 UISegmentControl 的 title 字体比 iOS7 上大，也可以一并做一下修改：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">//iOS6</div><div class="line">[[UISegmentedControl appearance] setBackgroundImage:[UIImage imageWithColor:selectedColor size:CGSizeMake(1, 29)]</div><div class="line">	forState:UIControlStateSelected</div><div class="line">	barMetrics:UIBarMetricsDefault];</div><div class="line">	</div><div class="line">[[UISegmentedControl appearance] setBackgroundImage:[UIImage imageWithColor:normalColor size:CGSizeMake(1, 29)]</div><div class="line">	forState:UIControlStateNormal</div><div class="line">	barMetrics:UIBarMetricsDefault];</div><div class="line">	</div><div class="line">[[UISegmentedControl appearance] setDividerImage:[UIImage imageWithColor:selectedColor size:CGSizeMake(1, 29)] </div><div class="line">	forLeftSegmentState:UIControlStateNormal </div><div class="line">	rightSegmentState:UIControlStateSelected </div><div class="line">	barMetrics:UIBarMetricsDefault];</div><div class="line">	</div><div class="line">[[UISegmentedControl appearance] setTitleTextAttributes:@&#123;</div><div class="line">		UITextAttributeTextColor: selectedColor,</div><div class="line">		UITextAttributeFont: [UIFont systemFontOfSize:14],</div><div class="line">		UITextAttributeTextShadowOffset: [NSValue valueWithUIOffset:UIOffsetMake(0, 0)] &#125;</div><div class="line">	forState:UIControlStateNormal];</div><div class="line">	</div><div class="line">[[UISegmentedControl appearance] setTitleTextAttributes:@&#123;</div><div class="line">		UITextAttributeTextColor: normalColor,</div><div class="line">		UITextAttributeFont: [UIFont systemFontOfSize:14],</div><div class="line">		UITextAttributeTextShadowOffset: [NSValue valueWithUIOffset:UIOffsetMake(0, 0)]&#125;</div><div class="line">	forState:UIControlStateSelected];</div></pre></td></tr></table></figure>
<p>通过 <code>appearance</code> 只能到这里了，还差 border 和 小圆角。 鉴于 UISegmentControl 设置还需要每个控件单独设置，所以还是推荐封装一下。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">if (!IOS7_OR_LATER) &#123;</div><div class="line">	self.segmentControl.layer.borderColor = selectedColor;</div><div class="line">	self.segmentControl.layer.borderWidth = 1.0f;</div><div class="line">	self.segmentControl.layer.cornerRadius = 4.0f;</div><div class="line">	self.segmentControl.layer.masksToBounds = YES;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="/image/ios6-segmentcontrol.png" alt="iOS6"> <img src="/image/ios7-segmentcontrol.png" alt="iOS7"></p>
<p>##结束</p>
<p>就写这么多吧，如果没有找到你想拍扁的控件，自己动手吧，如果你懒，那就去 GitHub 上找找吧 :] </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##前言&lt;/p&gt;
&lt;p&gt;前段时间，苹果在它的&lt;a href=&quot;https://developer.apple.com/support/appstore/&quot;&gt;开发者网站&lt;/a&gt;上放出了iOS系统安装比例，其中iOS7占到78%，iOS6占18%，剩余4%是iOS6以下版本。我们也借此机会将手上正在进行的两个项目都升级到支持iOS6及以上版本呢，有一种幸福来的太突然的赶脚，要知道在此之前我们都还在支持iOS4.3版本。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://esoftmobile.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>2013年个人总结</title>
    <link href="http://esoftmobile.com/2014/01/04/2013-year-end-summary/"/>
    <id>http://esoftmobile.com/2014/01/04/2013-year-end-summary/</id>
    <published>2014-01-04T12:47:48.000Z</published>
    <updated>2014-01-05T08:58:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>2013年对我来说是不平凡的一年，这一年我经历了离职、自由开发、就业，再离职、回原公司，这么多频繁的变动，其实是对我想要什么样的生活在迷茫中的探寻。</p>
<a id="more"></a>
<p>##经历流水账</p>
<p>今年3月份持续了近1年的中行网银iPad项目上线，我们iOS开发的3个小伙伴一个离职，一个调配到其他项目组，剩下我一个人坚守。因为是开发了一款几乎全功能的浏览器，整个项目中遇到了很多的问题，项目的过程也是非常的痛苦，我也创下了连续两个月加班都超过100小时的记录，但是好歹最后客户也认可了。项目上线后，后面的两个版本都在进行，一个SIT，一个UAT，而这些版本其实都是业务功能的拓展，客户端本身不用做修改，只是前端人员开发新的交易页面，所以我的工作就是每天打版本。但是银行封闭的办公环境，上个网都是问题，只能自己看点书，但是经常被要求打各种测试版本而打断，所以决定离开项目组，加入另一个刚开始的项目。</p>
<p>4月初从中行网银项目中抽身，加入了中行手机银行项目，其实手机银行项目11年就已经上线，后面经历了各种版本升级，最后还是决定重新开发，由原来页面解析方式改为Native开发。进入项目组，发现所有开发人员都是新招的，很多开发人员都是刚毕业或实习生，大家的开发经验都很少。为了控制项目的质量，所有基础的东西和框架设计都由我来做，包括项目框架的搭建、通讯的封装、实体模型的设计、公共控件的实现、统一样式的定义等几乎有一点通用性的东西都由我来控制，最后到他们每个开发人员的工作就是拿着接口文档请求数据，按照效果图或原型图绘制界面。项目的前期其实也挺有成就感的，每天都有很高的产出，每天给7、8个小伙伴解决各种开发问题。 但是一两个月后项目开发得差不多，需要连到银行的各个环境进行测试时，经常被国企一些低效的办事风格气得无语，有时候为了解决一个环境问题，各个部门来回推诿都要拖上几天。同时他们也会对客户端各种界面提出修改意见，经常反复。5月下旬的，感觉再也不能在这种工作环境中浪费生命了，开始看外面的一些工作机会。</p>
<p>后面去百度面试过一次，受挫而归。总结做iOS这两年多，框架之类的东西做过不少，但是很多iOS的知识存在盲点，于是决定好好进行补习，开始每天上班看各种官方文档、iOS开发的博客、开源项目、论坛等，项目的事能安排给别人做就都安排给别人做，为了及时总结，用在手上好些年没派上用场的域名 <a href="http://esoftmobile.com">esoftmobile.com</a> 在Github Pages上开了个人博客，其实从10年刚开始接触iOS时就在<a href="http://www.cnblogs.com/tracy-e" target="_blank" rel="external">博客园</a>上写东西了，后面好长时间没有更新了。每天上班就学习的状态持续了一段时间，但是还是经常会被各种没有太多意义但又不得不做的事情打断，最后就提了离职，裸辞了。</p>
<p>其实当时想着工作了3年时间，几乎每天都是工作得很繁忙，正好给自己放个假，同时在自我充电的同时看能不能自己做点项目。7月份的时候女朋友研究生毕业来北京找工作，我就每天在家学习自己感兴趣的东西，iOS相关的看的差不多，就看看Web开发，其实之前做浏览器开发，对web开发那些已经很熟悉了，就开始学习NodeJS。后面女朋友因为专业比较偏，又没有工作经验，很长一段时间没有找到工作，而我在家也没有收入，虽然3年的工作也有一些积蓄，但是女朋友压力很大，我想我得找一份工作让她安心一点。</p>
<p>9月份开始在内推和智联上投一些简历，主要看阿里、百度这些大公司的招聘信息，简历也投了不少，因为个人属于死宅类型的技术男，有时候很难表达和展现自己，虽然之前在公司也常常面试别人，但这些经历却都没有转化为我的经验，最后都没能够顺利的通过面试。后面干脆在智联上开放了自己的简历，等着别人主动找我吧，每天都也能接到好几个电话，但是大多数一接通就说是xxx公司的，问我能不能什么时候来面试，而通常是一些你听一遍记不住名字的公司，虽然有些是非互联网行业上市公司。后面针对类似的面试邀请，我通常让他们先给我发给邮件，然后告诉他我在邮件里答复，遇到哪些没听过名字的公司，直接邮件拒掉。后面只去 搜狐畅游 和 当当网 参加了面试，最后选择去了当当网。而与此同时，女朋友面试了一家上海的外企也拿到了offer，最后无奈的她去了上海，我留在北京。</p>
<p>入职当当之前，其实我是不知道进入哪个项目的，当时只知道当当网有两个iOS项目，当当网客户端和当当读书，以为是去当当网客户端，结果入职了才知道是当当读书，因为他们看重我之前做浏览器的经验，希望我能带着团队把排版引擎做好。当当读书第一个版本是请的外包，后面自己接过来，没有核心的排版引擎，使用的WebView做展现，而且代码结构混乱，规范性很差，大量冗余代码，使得其实很简单的一个书城+WebView展现的客户端代码量却是大得惊人。而团队中都是平均年龄30岁以上的开发人员，虽然他们自己的排版引擎也在开发，但是架构设计和代码依旧很烂。另外，团队的工作氛围也不是很好，积极性很差，当当规定技术部每天要保证10小时的工作时间，也就是早八点半到晚八点半，或早十点点到晚十点，但是很多人到了晚上都在上网看视频，凑够了10小时走人。你知道每天上班看着一堆乱代码而不能改（他们要保证上线时间），中午和同事一起吃饭而没有共同话题，团队人员为了工作满10小时而在那里加班是多么痛苦吗？两个星期后我提出了离职。</p>
<p>辞职后我有几个选择，继续在北京找工作，或者去上海和女朋友汇合，或者干脆回老家武汉，因为女朋友的爸妈也在催我们回武汉。鉴于我感觉之前做决定考虑的问题都不够全面，所以在做决定之前我找了之前公司的一个朋友吃了个饭，其实他之前是我的领导，后面成立新的部门做业务研发（非技术类），他比我大几岁，我希望他们给我一些建议。他给我讲了一些公司最近的变化以及现在正在做的事，并希望我们回公司去我之前另一个领导（技术总监）的部门做一些研究性的工作，同时也给我介绍了一位阿里的主管让我选择，考虑到能在熟悉的环境做一些自己想做的事情，最后我答应回原来的公司。</p>
<p>##一些总结</p>
<p>虽然感觉今年走了不少弯路，但是每一步都能够让我对某些事情有一些新的认识，而且休息期间感觉自己的技术有了很大提高，也开始坚持写一些原创博客或翻译一些比较好的文章，其中不少文章也被 <a href="http://www.cocoachina.com" target="_blank" rel="external">CocoaChina</a> 、 <a href="http://www.segmentfault.com" target="_blank" rel="external">SegmentFault</a> 和 <a href="http://weibo.com/tangqiaoboy" target="_blank" rel="external">@唐巧_boy</a> 的 微信公共帐号 <a href="">iOSDevTips</a> 转载或推荐过。</p>
<p>今年在Github上也开放了几个开源项目，其中<a href="https://github.com/tracy-e/OCGumbo" target="_blank" rel="external">OCGumbo</a>有80多个Star和十几个Fork，<a href="https://github.com/tracy-e/ESCssParser" target="_blank" rel="external">ESCssParser</a> 和 <a href="https://github.com/tracy-e/UIWebViewToFile" target="_blank" rel="external">UIWebViewToFile</a>也有十几个Star，虽然都不算多，但是对我来说也是一种鼓励和肯定吧。</p>
<p>今年也读了一些技术和非技术的书籍：</p>
<ul>
<li><a href="http://www.duokan.com/book/246" target="_blank" rel="external">《黑客与画家》</a></li>
<li><a href="http://www.duokan.com/book/1917" target="_blank" rel="external">《程序员的思维修炼》</a></li>
<li><a href="http://www.duokan.com/book/2127" target="_blank" rel="external">《写个大家看的设计书》</a></li>
<li><a href="http://www.duokan.com/book/231" target="_blank" rel="external">《番茄工作法》</a></li>
<li><a href="http://www.duokan.com/book/116" target="_blank" rel="external">《布道之道》</a></li>
<li>《Rework》</li>
<li>《史蒂夫乔布斯传》</li>
<li>《Node.js开发指南》</li>
<li>《Node即学即用》</li>
</ul>
<p>##2014年一些计划</p>
<p>2013年只是一个开始，2014年希望我能做的更好：</p>
<ul>
<li>继续写一些高质量的文章</li>
<li>虽然微博关注了很多iOS大牛，也被很多大牛关注，但是互动太少，希望2014年更多的参与进去</li>
<li>多参加一些技术会议，同时也希望能够做一些技术分享，锻炼一下自己的演讲能力</li>
<li>看完多看里面已购买的所有电子书和之前购买的纸质书</li>
<li>看不少于3本iOS开发相关书籍，包括《iOS6编程实战》、《Objective-C高级编程》、《iOS应用逆向工程》，鉴于不少大牛如 <a href="http://weibo.com/tangqiaoboy" target="_blank" rel="external">@唐巧_boy</a> 和  <a href="http://weibo.com/beyondvincent" target="_blank" rel="external">BeyondVincent</a> 今年都有出书的打算，如果内容不错的话可也支持一下</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2013年对我来说是不平凡的一年，这一年我经历了离职、自由开发、就业，再离职、回原公司，这么多频繁的变动，其实是对我想要什么样的生活在迷茫中的探寻。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Roles of Apple Developer</title>
    <link href="http://esoftmobile.com/2013/12/24/roles-of-apple-developer/"/>
    <id>http://esoftmobile.com/2013/12/24/roles-of-apple-developer/</id>
    <published>2013-12-24T08:43:41.000Z</published>
    <updated>2013-12-24T08:51:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>##Apple Developer Program Team Roles and Privileges</p>
<p>###Team roles</p>
<table>
<thead>
<tr>
<th>Role</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>Team agent</td>
<td>A <strong>team agent</strong> is legally responsible for the team and acts as the primary contact with Apple. The team agent can invite team members and change the access level of any other team member. There’s only one team agent.</td>
</tr>
<tr>
<td>Team admin</td>
<td>A <strong>team admin</strong> can set the privilege levels of other team members, except the team agent. Team admins manage all assets used to sign your apps, either during development or when your team is ready to distribute an app. Team admins are the only people on a team who can sign apps for distribution on nondevelopment devices. Team admins also approve signing certificate requests made by team members.</td>
</tr>
<tr>
<td>Team member</td>
<td>A <strong>team member</strong> can gain access to prerelease content delivered by Apple in Member Center. A team member can also sign apps during development, but only after he or she makes a request for a development signing certificate and has that request approved by a team admin.</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<p>###Team Privileges</p>
<table>
<thead>
<tr>
<th>Privilege</th>
<th>Team agent</th>
<th>Team admin</th>
<th>Team member</th>
</tr>
</thead>
<tbody>
<tr>
<td>Have legal responsibility for the team</td>
<td>YES</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr>
<td>Be the primary contact with Apple</td>
<td>YES</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr>
<td>View prerelease Apple content</td>
<td>YES</td>
<td>YES</td>
<td>YES</td>
</tr>
<tr>
<td>Enroll in additional developer programs and renew them</td>
<td>YES</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr>
<td>Invite team admins and team members</td>
<td>YES</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr>
<td>Request development certificates</td>
<td>YES</td>
<td>YES</td>
<td>YES</td>
</tr>
<tr>
<td>Approve team member requests for development certificates</td>
<td>YES</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr>
<td>Request distribution certificates</td>
<td>YES</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr>
<td>For Mac apps, request Developer ID certificates</td>
<td>YES</td>
<td>NO</td>
<td>NO</td>
</tr>
<tr>
<td>Add devices for development and testing</td>
<td>YES</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr>
<td>Create App IDs and enable certain technologies and services</td>
<td>YES</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr>
<td>Create development and distribution provisioning profiles</td>
<td>YES</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr>
<td>Create SSL certificates for Apple Push Notification service</td>
<td>YES</td>
<td>YES</td>
<td>NO</td>
</tr>
<tr>
<td>Download development provisioning profiles</td>
<td>YES</td>
<td>YES</td>
<td>YES</td>
</tr>
<tr>
<td>Submit apps to the App Store or Mac App Store</td>
<td>YES</td>
<td>NO</td>
<td>NO</td>
</tr>
</tbody>
</table>
<p>##iTunes Connect Roles</p>
<table>
<thead>
<tr>
<th>Role</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>Admin</td>
<td>Gives the user access to all iTunes Connect modules. Users with an Admin role have the ability to create, delete, or modify existing iTunes Connect users and test users. The initial iTunes Connect user (team agent), is granted both an Admin and a Legal role by default.</td>
</tr>
<tr>
<td>Legal</td>
<td>Gives the user access to all modules. This role is only available to the initial iTunes Connect user (team agent) and can’t be edited in iTunes Connect. This role allows the individual to enter into agreements with iTunes via iTunes Connect and to request promo codes. To change your team agent, you must visit Member Center.</td>
</tr>
<tr>
<td>Finance</td>
<td>Gives the user access to Financial Reports, Contracts, Tax and Banking Information, iAd App Network, and Sales/Trend Reports modules. Users with a Finance role can view users’ profiles but can edit only their own user information.</td>
</tr>
<tr>
<td>Technical</td>
<td>Gives the user access to Manage Your Apps, Contact Us, Manage Users, and iAd App Network modules. Technical users can create test users. Users with a Technical role can view other users’ profiles but can edit only their own user information.</td>
</tr>
<tr>
<td>Sales</td>
<td>Gives the user access to the Sales/Trend Reports, Manage Users, iAd App Network, and Contact Us modules. Users with a Technical role can view other users’ profiles but can edit only their own user information. Assign this role to those in your organization who need access to reporting, marketing, and ad campaign information but not to app management or financial information.</td>
</tr>
<tr>
<td>Marketing</td>
<td>Gives the user access to the Contact Us module. Assign this role to the person on your team who manages your marketing materials and any promotional artwork. Users with the Marketing role are contacted by the App Store team if an app is chosen to be featured in the App Store.</td>
</tr>
</tbody>
</table>
<p>links:</p>
<ul>
<li><a href="https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40012582-CH1-SW1" target="_blank" rel="external">《App Distribution Guide》</a></li>
<li><a href="https://developer.apple.com/library/ios/documentation/LanguagesUtilities/Conceptual/iTunesConnect_Guide/Chapters/About.html" target="_blank" rel="external">《iTunes Connect Developer Guide》</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##Apple Developer Program Team Roles and Privileges&lt;/p&gt;
&lt;p&gt;###Team roles&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Role&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Team agent&lt;/td&gt;
&lt;td&gt;A &lt;strong&gt;team agent&lt;/strong&gt; is legally responsible for the team and acts as the primary contact with Apple. The team agent can invite team members and change the access level of any other team member. There’s only one team agent.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Team admin&lt;/td&gt;
&lt;td&gt;A &lt;strong&gt;team admin&lt;/strong&gt; can set the privilege levels of other team members, except the team agent. Team admins manage all assets used to sign your apps, either during development or when your team is ready to distribute an app. Team admins are the only people on a team who can sign apps for distribution on nondevelopment devices. Team admins also approve signing certificate requests made by team members.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Team member&lt;/td&gt;
&lt;td&gt;A &lt;strong&gt;team member&lt;/strong&gt; can gain access to prerelease content delivered by Apple in Member Center. A team member can also sign apps during development, but only after he or she makes a request for a development signing certificate and has that request approved by a team admin.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://esoftmobile.com/tags/iOS/"/>
    
      <category term="Mac" scheme="http://esoftmobile.com/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>iBeacon开发</title>
    <link href="http://esoftmobile.com/2013/12/15/ibeacons/"/>
    <id>http://esoftmobile.com/2013/12/15/ibeacons/</id>
    <published>2013-12-15T03:57:28.000Z</published>
    <updated>2014-04-29T12:41:47.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/image/beacon.jpg" alt="Beacon"></p>
<p>##什么是iBeacon</p>
<p>iBeacon是苹果在2013年WWDC上推出一项基于蓝牙4.0（Bluetooth LE | BLE | Bluetooth Smart）的精准微定位技术，当你的手持设备靠近一个Beacon基站时，设备就能够感应到Beacon信号，范围可以从几毫米到50米。iBeacon相比较于原来的蓝牙技术有几个特点：  </p>
<a id="more"></a>
<ul>
<li>首先它不需要配对，所以你不用担心一个名为『一头母猪』的蓝牙设备请求和你配对^_^。苹果在之前对蓝牙设备的控制比较严格，所以只有通过MFI认证过的蓝牙设备才能与iDevice连接，而蓝牙4.0就没有这些限制了；</li>
<li>准确与距离。普通的蓝牙（蓝牙4.0之前）一般的传输距离在0.1~10m，而iBeacon信号据说可以精确到毫米级别，并且最大可支持到50m的范围；</li>
<li>功耗更低。其实蓝牙4.0又叫低功耗蓝牙，一个普通的纽扣电池可供一个Beacon基站硬件使用两年。</li>
</ul>
<p>目前已经有不少硬件厂商都在生产Beacon发射硬件，文章配图为<a href="http://www.estimote.com" target="_blank" rel="external">Estimote</a>公司生产的宝石形状的Beacon。当然并不是非得购买这些Beacon硬件才能使用iBeacon技术，其实从iPhone 4S和iPad 3及后续设备都已经支持蓝牙4.0，所以这些设备升级到iOS7都能够支持iBeacon，同时也能作为Beacon发射基站使用。 苹果在全美254家Apple Store中部署iBeacon很多就是直接使用iDevice作为基站。</p>
<p>##Passbook + iBeacon</p>
<p>在iOS7中，Passbook的功能所有增强，当然也少不了对iBeacon的支持，你只需要在pass.json文件中加入<code>beacons</code>字段，然后填写上与该Pass相关的beacon基站信息，包括<code>proximityUUID</code>、<code>major</code>、<code>minor</code>以及当该Pass接收到该beacon信号时需要显示的文本<code>relevantText</code>。这样，当你把这个包含beacons信息的Pass加入到Passbook，并靠近beacons中的某个基站时，该Pass的信息就会自动出现在手机的锁屏界面上，并显示<code>relevantText</code>中的文本。当然得有一个前提：手机打开蓝牙。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&quot;beacons&quot;:[</div><div class="line">  &#123;</div><div class="line">   &quot;proximityUUID&quot; : &quot;E2C56DB5-DFFB-48D2-B060-D0F5A71096E0&quot;,</div><div class="line">   &quot;relevantText&quot; : &quot;TechDay 2013 Beijing&quot;,</div><div class="line">   &quot;major&quot; : 0,</div><div class="line">   &quot;minor&quot; : 0</div><div class="line">   &#125;</div><div class="line">],</div></pre></td></tr></table></figure>
<p>和 <code>locations</code> 字段一样，一个Pass文件中最多支持10个beacon基站信息。其实这样做也是出于省电考虑，因为系统在每次接收到beacon信号时，都会在Passbook库中轮询每一个Pass的<code>beacons</code>信息，匹配后才将它显示出来，所以如果不做数量限制，耗电量可能就难以接受，<code>locations</code>原理也类似。</p>
<p>##iBeacon开发</p>
<p>###Beacon Monitoring</p>
<p>因为是一种定位技术，苹果将iBeacon相关的接口放到了 CoreLocation.framework 。在iOS7之前，我们可以通过CLRegion定义一个地理区域，来跟踪设备在该区域内的运动情况，iOS7之后，CLRegion被完全变成了一个抽象类，子类<code>CLCircularRegion</code>和<code>CLBeaconRegion</code>分别承担实现一个地理区域和Beacon信号区域的功能。</p>
<p>即iOS7之后的CLRegion主要有两个属性：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@interface CLRegion : NSObject &lt;NSCopying, NSSecureCoding&gt;</div><div class="line">@property (nonatomic, assign) BOOL notifyOnEntry;</div><div class="line">@property (nonatomic, assign) BOOL notifyOnExit;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p><code>notifyOnEntry</code>和<code>notifyOnExit</code>分别标记是否在进入和离开该区域时对是否获得通知（代理方法）。<code>CLBeaconRegion</code>另外增加了一个属性<code>notifyEntryStateOnDisplay</code>标记是否在用户手机屏幕点亮时获得通知。</p>
<!--
一个beacon基站主要有三个属性，即上面说到过的：`proximityUUID`、 `major`、 `minor`，对应到CoreLocation中的`CLBeacon`类：

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@interface CLBeacon : NSObject &lt;NSCopying, NSSecureCoding&gt;</div><div class="line">//...</div><div class="line">@property (readonly, nonatomic) NSUUID *proximityUUID;</div><div class="line">@property (readonly, nonatomic) NSNumber *major;</div><div class="line">@property (readonly, nonatomic) NSNumber *minor;</div><div class="line">//...</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>–&gt;</p>
<p>我们要监听一个beacon基站，需要创建一个对应基站的区域信息CLBeaconRegion，并设置相应的监听属性：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">NSUUID *uuid = [[NSUUID alloc] initWithUUIDString:@&quot;E2C56DB5-DFFB-48D2-B060-D0F5A71096E0&quot;];</div><div class="line">CLBeaconRegion *targetBeaconRegion = [[CLBeaconRegion alloc] initWithProximityUUID:uuid identifier:@&quot;TechDay 2013 Beijing&quot;];</div><div class="line">targetBeaconRegion.notifyOnEntry = YES;</div><div class="line">targetBeaconRegion.notifyOnExit = YES;</div><div class="line">targetBeaconRegion.notifyEntryStateOnDisplay = YES;</div></pre></td></tr></table></figure>
<p>创建完Regoin后，我们需要对该Region进行监控以获取是否进入该区域及一些距离等信息，创建一个CLLocationManager实例然后调用<code>startMonitoringForRegion:</code>方法来监控上面的BeaconRegion：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">self.locationManager = [[CLLocationManager alloc] init];</div><div class="line">self.locationManager.delegate = self;</div><div class="line">[self.locationManager startMonitoringForRegion:targetBeaconRegion];</div></pre></td></tr></table></figure>
<p>剩下的就是通过<code>CLLocationManagerDelegate</code>中的各个方法来接收所监听基站的信息，如进入或离开该Beacon区域，计算举例某个CLBeacon的距离等。</p>
<p>需要说明一点的是，CLLocationManager默认是可以在程序退到后台后继续监听的，也就是只要设置了<code>notifyOnEntry</code>、 <code>notifyOnExit</code>、 <code>notifyEntryStateOnDisplay</code>这几个属性，程序退到后台时如果监测到beacon信息（进入、离开、屏幕点亮）时，会通知到代理方法：<code>- (void)locationManager:(CLLocationManager *)manager didDetermineState:(CLRegionState)state forRegion:(CLRegion *)region</code>，你可以在该代理里面进行一些信息处理或推送一个本地消息提示用户，用户查看该消息会将程序调用起来。</p>
<p>在iOS7.1中，苹果对iBeacon功能进行了加强，不用程序保持在后台了，哪怕程序强制关掉（双击Home键后滑掉）、手机重启，只要设备监测到了对用的Beacon信息，在设备屏幕点亮时一样会调用上面的代理通知程序，这无疑增加了iBeacon的应用场景。</p>
<p>###Beacon Broadcasting</p>
<p>前面我们说到所有支持蓝牙4.0的iDevice都能够作为beacon基站发射信号，这就需要 CoreBluetooth.framework 的支持。 我们需要创建一个<code>CBPeripheralManager</code>实例，然后发射beacon广播信号：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//为beacon基站创建一个唯一标示</div><div class="line">NSUUID *myUUID = [[NSUUID alloc] initWithUUIDString:@&quot;A4E86DC5-A0E2-G7W0-B060-A0F5A71096C0&quot;];</div><div class="line">CLBeaconRegion *myBeaconRegion = [[CLBeaconRegion alloc] initWithProximityUUID:myUUID identifier:@&quot;iBeacon&quot;];</div><div class="line"></div><div class="line">//获取该Beacon区域的信号信息</div><div class="line">NSDictionary *peripheralData = [myBeaconRegion peripheralDataWithMeasuredPower:nil];</div><div class="line"></div><div class="line">//创建并广播Beacon信号</div><div class="line">CBPeripheralManager *peripheralManager = [[CBPeripheralManager alloc] initWithDelegate:self queue:dispatch_get_main_queue()];</div><div class="line">[peripheralManager startAdvertising:peripheralData];</div></pre></td></tr></table></figure>
<p>当然你还需要在<code>CBPeripheralManagerDelegate</code>代理方法：<code>peripheralManagerDidUpdateState:</code>根据不同的状态做一些处理。</p>
<p>##总结</p>
<p>苹果的伟大之处就是在于将复杂的技术以简单的形式呈现出来，相信看完本文你已经对iBeacon开发相关的技术有了很好的了解，然而iBeacon技术本身的应用才是真正体现价值的地方，相信它能给很多行业带来变革。</p>
<hr>
<p>推荐官方示例代码：<a href="https://developer.apple.com/library/ios/samplecode/AirLocate/Introduction/Intro.html">AirLocate</a></p>
-->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/image/beacon.jpg&quot; alt=&quot;Beacon&quot;&gt;&lt;/p&gt;
&lt;p&gt;##什么是iBeacon&lt;/p&gt;
&lt;p&gt;iBeacon是苹果在2013年WWDC上推出一项基于蓝牙4.0（Bluetooth LE | BLE | Bluetooth Smart）的精准微定位技术，当你的手持设备靠近一个Beacon基站时，设备就能够感应到Beacon信号，范围可以从几毫米到50米。iBeacon相比较于原来的蓝牙技术有几个特点：  &lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://esoftmobile.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>马上着手开发Mac应用程序</title>
    <link href="http://esoftmobile.com/2013/10/30/start-developing-mac-apps-today/"/>
    <id>http://esoftmobile.com/2013/10/30/start-developing-mac-apps-today/</id>
    <published>2013-10-30T15:03:18.000Z</published>
    <updated>2013-11-02T09:57:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/image/start_mac_steps.png" alt="Road Map"></p>
<p>你是否想要开发 Mac 应用程序却又不知道从哪里入手？本路线图提供了 Mac 应用程序开发的绝佳起点，即使你已经是一个 iOS 开发专家，本路线图对你依然适用。Apple让开发应用程序和提交应用程序到 Mac App Store 变得简单。遵循本路线图以了解如何取得开发工具，理解主要概念及最佳实践，并学会查找更多信息。</p>
<a id="more"></a>
<p>继续遵循此路线图，你将使用到 Xcode（Apple 提供的集成开发工具）来开发 Mac 应用程序。你将了解 Objective-C（驱动所有Mac应用程序和框架的程序设计语言）的编程基础知识，并将探索 Cocoa 框架。最后，你还会学到如何将应用程序提交到 Mac App Store。</p>
<p><img src="/image/start_mac_intro2.png" alt=""></p>
<p>路线图中的每个页面，都介绍一个新主题，并链接到一篇或多篇有关该主题的简短文章。路线图只是提供基本的入门知识，最后一页“接下来做什么”包含你接下来应该阅读的文稿链接。完成了路线图，你就具备了进一步了解各个主题的能力，并且掌握到着手开发 Mac 应用程序的知识、工具和技能。</p>
<blockquote>
<p><strong>如果你是 iOS 开发者：</strong>你其实已经掌握了不少开发Mac应用程序的知识。在路线图的学习过程中，重点关注平台的差异性。因为尽管 iOS 和 OS X 使用相同的开发工具和开发语言，两者仍然存在着一些重大的差异。</p>
</blockquote>
<p>##设置##</p>
<p>你在开发应用程序时，会使用到 Xcode，即 Apple 的集成开发环境 (IDE)。Xcode 为开发完美的 Mac 应用程序，提供了你所需要的一切。它包括源代码编辑器、图形用户界面编辑器和许多其他功能。大多数应用程序开发工具集中显示在一个窗口中，Xcode 称之为工作区窗口。在此窗口内，你可以顺畅地从代码编写转换到代码调试，再到用户界面设计。</p>
<p><img src="/image/start_mac_intro3.png" alt=""></p>
<p><strong>开始之前：</strong></p>
<ol>
<li><p>下载最新版本的 Xcode。</p>
<p> 在 Mac 上打开 <a href="macappstore://itunes.apple.com/us/app/xcode/id497799835?mt=12" target="_blank" rel="external">Mac App Store</a> 应用程序，搜索 Xcode，然后点按“免费”按钮下载 Xcode。（Mac OS X v10.7 以及更高版本已经预装 Mac App Store 应用程序。如果你使用的是较早版本的 Mac OS X，则需要升级。）</p>
</li>
<li><p><a href="https://developer.apple.com/programs/mac/" target="_blank" rel="external">加入 Mac Developer Program 成为 Apple 开发者。</a>  </p>
<p> 加入该计划后，你可以访问分发应用程序的所有工具和资源，在本路线图后面你将了解关于这些工具的更多信息。</p>
</li>
</ol>
<p>##马上开始##</p>
<p>开发优秀的 Mac 应用程序，需要大量的学习和实践。不过，有了这些工具，开发一个简单可用的程序并非难事。“你的首个 Mac 应用程序”教程，介绍了这些工具、基本设计模式和应用程序开发过程。通过这个教程，你将创建一个类似音量控制器的程序，可以通过多种形式的输入来控制一个控制器。本教程中的简单步骤引入了一些简练实用的概念，将在今后的程序开发中不断地用到。</p>
<p><img src="/image/start_mac_intro4.png" alt=""></p>
<p>“你的首个 Mac 应用程序”是路线图中最长的文章，但请不要仓促地完成它。它为你在后面将详细学习的概念奠定了基础。其他每篇文章，都是围绕当中某个概念再深入说明。</p>
<blockquote>
<p><strong>立即学习本教程：</strong>“<a href="https://developer.apple.com/library/mac/referencelibrary/GettingStarted/RoadMapOSX/books/RM_YourFirstApp_Mac/Articles/Introduction.html" target="_blank" rel="external">你的首个 Mac 应用程序</a>”告诉你，如何在 OS X 开发环境中，创建一个简单的应用程序。完成教程后，可返回本页继续学习《<strong>马上着手开发 Mac 应用程序</strong>》。</p>
</blockquote>
<p>##工具</p>
<p>Xcode 提供整套管理开发工作流程的工具——从创建应用程序、设计用户界面，到测试、优化，并将其提交到 Mac App Store。你可以自定 Xcode，来符合你的工作风格，让你专注于手头的任务。</p>
<p><img src="/image/start_mac_intro5.png" alt=""></p>
<p>“你的首个 Mac 应用程序”向你展示了如何创建新项目、添加用户界面元素，以及编辑源代码。创建应用程序后，你可使用 Xcode 来测试和调试源代码、分析和改进应用程序的性能、执行源代码控制操作、归档并将应用程序提交到 Mac App Store 等等。</p>
<blockquote>
<p>立即阅读此文章：“<a href="https://developer.apple.com/library/mac/referencelibrary/GettingStarted/RoadMapOSX/books/ManageYourWorkflowinXcode/ManageYourWorkflowinXcode/ManageYourWorkflowinXcode.html" target="_blank" rel="external">在 Xcode 中管理工作流程</a>”向你展示 Xcode 用于 iOS 应用程序开发的重要功能。</p>
</blockquote>
<p>##程序设计语言</p>
<p>Objective-C 是一种简洁的、面向对象的程序设计语言，所有 Mac 应用程序都由它来驱动。你需要编写 Objective-C 代码来创建应用程序，同时你需要懂得该语言，才能使用大多数的框架。尽管你可以使用其他编程语言来开发，但不使用 Objective-C 就无法生成 Mac 应用程序。</p>
<p><img src="/image/start_mac_intro6.png" alt=""></p>
<p>Objective-C 是一种简单的程序设计语言，其语法和规范简单易学。如果你有其他面向对象程序设计语言（例如 Java 或 C++）的编程经验，那么它对你来说，将更容易上手。如果你是 C 语言程序员，你会发现熟悉面向对象编程和 Objective-C 后，应用程序的设计和修改变得更加容易。</p>
<blockquote>
<p><strong>立即阅读此文章:</strong>“<a href="https://developer.apple.com/library/mac/referencelibrary/GettingStarted/RoadMapOSX/books/WriteObjective-CCode/WriteObjective-CCode/WriteObjective-CCode.html" target="_blank" rel="external">编写 Objective-C 代码</a>”教你 Objective-C 的基本语法，包括类声明、方法、发消息和声明属性。Mac 和 iOS 应用程序都可用 Objective-C 来开发。如果你是 iOS 开发者，那么基本语法对你来说已经不是问题了。</p>
</blockquote>
<p>##基本任务</p>
<p>现在，你学到的 Objective-C 的知识，足可用来阅读和编写基本代码，你可以开始以对象的方式来考虑问题了。如同思考现实世界中的对象一样，你应该思考一个对象包含什么内容，可以用来做什么，以及如何与其他对象关联。</p>
<p><img src="/image/start_mac_intro7.png" alt=""></p>
<p>要创建 Mac 应用程序，你需要了解如何创建对象、比较对象、查询对象的相关信息，以及访问数据集（如数组）中的对象。掌握这些技能后，你就可以编写更复杂的 Objective-C 代码了。</p>
<blockquote>
<p><strong>立即阅读此文章：</strong>“<a href="https://developer.apple.com/library/mac/referencelibrary/GettingStarted/RoadMapOSX/books/AcquireBasicProgrammingSkills/AcquireBasicSkills/AcquireBasicSkills.html" target="_blank" rel="external">掌握基本的编程技能</a>”描述 Objective-C 编程的基本任务。本文解释的概念在 Mac 和 iOS 开发中基本相同。</p>
</blockquote>
<p>##框架</p>
<p>应用程序由你编写的代码和 Apple 提供的框架组成。框架包含方法资源库，供你的应用程序调用。多个应用程序可同时访问一个框架资源库。</p>
<p><img src="/image/start_mac_intro8.png" alt=""></p>
<p>你开发的应用程序都会链接多种框架。你可以通过框架的应用编程接口 (API) 来利用框架。API（已发布在头文件中）指定可用的类、数据结构和协议。Apple 编写的框架，预计了你可能想要实现的基本功能。使用框架既省时省力，又可确保代码高效、安全。系统框架是访问底层硬件的唯一途径。</p>
<blockquote>
<p><strong>立即阅读以下文章：</strong><br> “<a href="https://developer.apple.com/library/mac/referencelibrary/GettingStarted/RoadMapOSX/books/SurveytheMajorFrameworks_Mac/SurveytheMajorFrameworks/SurveytheMajorFrameworks.html" target="_blank" rel="external">研究主要框架</a>”描述应用程序开发中最常用的框架。它还简要阐述了 OS X API 和 iOS API 之间的一些异同点。<br>“<a href="https://developer.apple.com/library/mac/referencelibrary/GettingStarted/RoadMapOSX/books/IntegrateYourCodewiththeFrameworks/IntegrateYourCode/IntegrateYourCode.html" target="_blank" rel="external">将代码与框架整合</a>”描述 Objective-C 框架中的方法种类，并解释如何将应用程序代码与框架代码整合。尽管 OS X API 和 iOS API 之间存在不同之处，但应用程序和框架之间的关系通常相同。</p>
</blockquote>
<p>##设计模式</p>
<p>设计模式可以解决常见的软件工程问题。模式是抽象设计，而非代码。采用一种设计，就是应用它的通用模式来满足具体需求。</p>
<p><img src="/image/start_mac_intro9.png" alt=""></p>
<p>不管是创建哪种类型的应用程序，你都应该了解框架中使用的基本设计模式。了解设计模式有助于更高效地使用框架，并且可让你编写的程序复用程度更高、扩展能力更强和更容易修改。</p>
<blockquote>
<p><strong>立即阅读此文章：</strong>“<a href="https://developer.apple.com/library/mac/referencelibrary/GettingStarted/RoadMapOSX/books/StreamlineYourAppswithDesignPatterns/StreamlineYourApps/StreamlineYourApps.html" target="_blank" rel="external">采用设计模式使你的应用程序合理化</a>”描述关键的设计模式，并解释如何在应用程序开发中使用这些模式。这些设计模式在 OS X 和 iOS 中基本相同。</p>
</blockquote>
<p>##用户界面设计</p>
<p>仅仅创建一个能用的应用程序是不够的，用户期望的 Mac 应用程序是直观易用、交互性强和引人入胜的。在设计应用程序时，从选取的功能到应用程序响应手势的方式，每个方面都要考虑用户体验。</p>
<p><img src="/image/start_mac_intro10.png" alt=""></p>
<p>用户或许不知道用户界面的设计原则，但是应用程序有没有遵循指南，他们是可以分辨出来的。请遵循《OS X Human Interface Guidelines》（OS X 用户界面指南）中清楚说明的原则和约定，为你的产品设计最好的用户界面和用户体验。</p>
<blockquote>
<p><strong>立即阅读此文章：</strong>“<a href="https://developer.apple.com/library/mac/referencelibrary/GettingStarted/RoadMapOSX/books/DesignwiththeUserinMind_Mac/DesignwiththeUserinMind/DesignwiththeUserinMind.html" target="_blank" rel="external">从用户角度进行设计</a>”阐述了如何创建具有卓越用户体验的应用程序。本文稿介绍编程时需遵循的指南，但不涉及如何在代码中实现设计。大多数 OS X 指南，都与 iOS 的不同，因为移动设备上的应用程序，在本质上是不同的。</p>
</blockquote>
<p>##应用程序设计</p>
<p>程序不会自动生成，它们不仅与运行的环境密切相关，还需要用到 OS X 系统提供的特性。用户期望看到你的应用程序像系统自带的邮件、日历、计算器程序一样运行。要实现程序的功能，你需要了解它背后的技术以及怎么样来使用这些技术。</p>
<p><img src="/image/start_mac_intro11.png" alt=""></p>
<p>在你想好你的应用程序应该提供哪些功能后，你就需要决定以什么样的显示来展现出来。你的应用程序是一个但窗口的实用程序还是基于文档的多窗口应用？这些设计的决定直接影响程序的结构。所有的 Mac 应用程序都是基于一组核心应用程序对象构建起来的，在你能够定制这些对象来实现你应用程序的功能前，你需要理解它们是怎样协同工作的。</p>
<blockquote>
<p><strong>立即阅读此文章：</strong><br>  “<a href="https://developer.apple.com/library/mac/referencelibrary/GettingStarted/RoadMapOSX/books/DesignYourAppwithCare/DesignYourAppwithCare/DesignYourAppwithCare.html" target="_blank" rel="external">满足用户的期望</a>“展现了一些你程序中需要考虑的主要的 OS X 特性和技术。<br>   “<a href="https://developer.apple.com/library/mac/referencelibrary/GettingStarted/RoadMapOSX/books/KnowTheCoreObjectsOfYourApp/KnowtheCoreObjectsofYourApp/KnowtheCoreObjectsofYourApp.html" target="_blank" rel="external">了解你的应用程序的核心对象</a>”叙述作为所有应用程序的一部分的重要框架，以及它们是如何协作。</p>
</blockquote>
<p>##Mac App Store</p>
<p>您目前所读到的信息主要描述在 Xcode 中创建应用程序的方法。然而，要在 Mac App Store 上发布应用程序，您还需要进一步了解相关内容。</p>
<p><img src="/image/start_mac_intro12.png" alt=""></p>
<p>测试和改进应用程序后，你需要将你的工程打包这样别人才能在他们的电脑上安装和运行。你需要创建证书来授权开发者给应用程序签名，以及创建 App ID 来标识应用程序，然后还要收集你需要在 Mac App Store 展示的信息。你通过 Xcode 来提交应用程序，你的应用程序必须通过 Mac App Store 审查人员审批之后才能正式发布。</p>
<blockquote>
<p><strong>立即阅读此文章：</strong>“<a href="https://developer.apple.com/library/mac/referencelibrary/GettingStarted/RoadMapOSX/books/RM_PrepareForAppStore_Mac/PrepareForAppStore/PrepareForAppStore.html" target="_blank" rel="external">准备提交到 Mac App Store</a>“描述为 Mac App Store 开发应用程序的管理方面的任务。</p>
</blockquote>
<p>##查找信息</p>
<p>开发应用程序时，需要能轻易得到详细的技术信息。Xcode 可让你在编程时轻松查找到所需信息。</p>
<p><img src="/image/start_mac_intro13.png" alt=""></p>
<p>Xcode Quick Help 显示简明的参考信息，不会分散您对正在编辑的文件的注意力。请点按符号、界面对象或生成设置，以查看更多信息。按住 Control 键点按 Xcode 本身的各个区域，获得任务导向的说明，介绍如何执行常见操作。每篇帮助文章都提供逐步的指导，并且通常包括视频或插图来进一步说明。</p>
<p>Xcode 中的“Documentation”管理器，提供深入的编程指南、指导教程、示例代码、开发者工具使用手册、详细的框架 API 参考，以及由 Apple 工程师讲解的视频演示。“Documentation”管理器提供了一个一体化视图，可在其中搜索和浏览所有 Apple 开发者文稿。OS X Developer Library 也在网上提供。</p>
<blockquote>
<p><strong>立即阅读此文章：</strong>“<a href="https://developer.apple.com/library/mac/referencelibrary/GettingStarted/RoadMapOSX/books/FindDocumentationQuickly_Mac/FindDocumentationQuickly/FindDocumentationQuickly.html" target="_blank" rel="external">快速查找文稿</a>”图解如何使用这些重要的文稿资源。</p>
</blockquote>
<p>##接下来做什么</p>
<p>祝贺您，您已学完<strong>《马上着手开发 Mac 应用程序》</strong>中的所有内容，并阅读了所要求的关联文章，现在可以进行 Mac 应用程序的开发了。但是，要成为高效多产的 iOS 开发者，首先，应该加入 <a href="http://developer.apple.com/programs/mac/" target="_blank" rel="external">Mac Developer Program</a>。然后，您就可以从 Mac Developer Library 下载示例应用程序项目，并从中了解各个方面是如何配合工作的，从而深化已学到的知识和技能。</p>
<p>###阅读以下文稿来增进你的 Mac 应用程序开发知识</p>
<ul>
<li>《<a href="https://developer.apple.com/library/mac/documentation/MacOSX/Conceptual/OSX_Technology_Overview/About/About.html#//apple_ref/doc/uid/TP40001067" target="_blank" rel="external">Mac OS X Technology Overview</a>》(Mac OS X 技术概述)介绍可在 OS X 应用程序中使用的框架和其他技术。</li>
<li>《<a href="https://developer.apple.com/library/mac/documentation/UserExperience/Conceptual/AppleHIGuidelines/Intro/Intro.html#//apple_ref/doc/uid/20000957" target="_blank" rel="external">OS X Human Interface Guidelines</a>》(OS X 用户界面指南)教你如何让你的应用程序符合 OS X 用户界面规范。</li>
<li>《<a href="https://developer.apple.com/library/mac/documentation/IDEs/Conceptual/AppDistributionGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40012582" target="_blank" rel="external">App Distribute Guide</a>》(应用程序分发指南)带你完成向 Mac App Store 提交应用程序的过程。</li>
<li>《<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Introduction/Introduction.html#//apple_ref/doc/uid/TP40011210" target="_blank" rel="external">Programming with Objective-C</a>》（使用 Objective-C 编程）描述如何使用 Objective-C 程序设计语言定义类、发送消息、封装数据，以及完成各种其他任务。</li>
<li><p>《<a href="https://developer.apple.com/library/mac/documentation/General/Conceptual/MOSXAppProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40010543" target="_blank" rel="external">Mac App Programming Guide</a>》(Mac 应用程序编程指南)讲解在开发 Mac 应用程序时，你必须要了解并做到的基本事情。</p>
<hr>
<p>PS: 本来以为和iOS路线图有很大差别的，结果发现大部分情况下只需要将 iOS 换成 Mac 或 OS X，但是既然开始，就坚持弄完吧！</p>
</li>
</ul>
<p> <strong>参考链接：</strong></p>
<p> Start Developing Mac Apps Today: <a href="https://developer.apple.com/library/mac/referencelibrary/GettingStarted/RoadMapOSX/chapters/01_Introduction.html" target="_blank" rel="external">https://developer.apple.com/library/mac/referencelibrary/GettingStarted/RoadMapOSX/chapters/01_Introduction.html</a></p>
<p> 马上着手开发 iOS 应用程序 (Start Developing iOS Apps Today) : <a href="https://developer.apple.com/library/ios/referencelibrary/GettingStarted/RoadMapiOSCh/chapters/Introduction.html" target="_blank" rel="external">https://developer.apple.com/library/ios/referencelibrary/GettingStarted/RoadMapiOSCh/chapters/Introduction.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/image/start_mac_steps.png&quot; alt=&quot;Road Map&quot;&gt;&lt;/p&gt;
&lt;p&gt;你是否想要开发 Mac 应用程序却又不知道从哪里入手？本路线图提供了 Mac 应用程序开发的绝佳起点，即使你已经是一个 iOS 开发专家，本路线图对你依然适用。Apple让开发应用程序和提交应用程序到 Mac App Store 变得简单。遵循本路线图以了解如何取得开发工具，理解主要概念及最佳实践，并学会查找更多信息。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Mac" scheme="http://esoftmobile.com/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>Text Kit进阶</title>
    <link href="http://esoftmobile.com/2013/10/17/text-kit%E8%BF%9B%E9%98%B6/"/>
    <id>http://esoftmobile.com/2013/10/17/text-kit进阶/</id>
    <published>2013-10-17T13:59:22.000Z</published>
    <updated>2013-10-19T02:25:44.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/image/text_kit_2_architecture.png" alt="Text Rendering Architecture"></p>
<blockquote>
<p>在上一篇文章<a href="http://esoftmobile.com/2013/10/17/text-kit入门/">Text Kit入门</a>中我们主要了解了什么是Text Kit及它的一些架构和基本特性，这篇文章中会涉及关于Text Kit的更多具体应用。</p>
</blockquote>
<p>Text Kit是建立在Core Text框架上的，我们知道CoreText.framework是一个庞大而复杂的框架，而Text Kit在继承了Core Text强大功能的同时给开发者提供了比较友好的面向对象的API。</p>
<p>本文主要介绍Text Kit下面四个特性：</p>
<ul>
<li>动态字体（Dynamic type）</li>
<li>凸版印刷体效果（Letterpress effects）</li>
<li>路径排除（Exclusion paths）</li>
<li>动态文本格式化和存储（Dynamic text formatting and storage）</li>
</ul>
<a id="more"></a>
<p>##Dynamic type</p>
<p>动态字体是iOS7中新增加的比较重要的特性之一，程序应该按照用户设定的字体大小和粗细来显示文本内容。</p>
<p>分别在<code>设置\通用\辅助功能</code>和<code>设置\通用\文字大小</code>中可以设置文本在应用程序中显示的粗细和大小。</p>
<p><img src="/image/text_kit2_setting_fontweight.png" alt="Font Weight"> <img src="/image/text_kit_2_setting_fontsize.png" alt="Font Size"></p>
<p>iOS7对系统字体在显示上做了一些优化，让不同大小的字体在屏幕上都能清晰的显示。通常用户设置了自己偏好的字体，他们希望在所有程序中都看到文本显示是根据他们的设定进行调整。为了实现这个，开发者需要在自己的应用中给文本控件设置当前用户设置字体，而不是指定死字体及大小。可以通过<code>UIFont</code>中新增的<code>preferredFontForTextStyle:</code>方法来获取用户偏好的字体。</p>
<p>iOS7中给出了6中字体样式供选择：</p>
<ul>
<li>UIFontTextStyleHeadline</li>
<li>UIFontTextStyleBody</li>
<li>UIFontTextStyleSubheadline</li>
<li>UIFontTextStyleFootnote</li>
<li>UIFontTextStyleCaption1</li>
<li>UIFontTextStyleCaption2</li>
</ul>
<p><img src="/image/text_kit_2_textstyles.png" alt="Text Style"></p>
<p>为了让我们的程序支持动态字体，需要按一下方式给文本控件（通常是指<code>UILabel</code>，<code>UITextField</code>，<code>UITextView</code>）设定字体：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">self.textView.font = [UIFont preferredFontForTextStyle:UIFontTextStyleBody];</div></pre></td></tr></table></figure>
<p>这样设置之后，文本控件就会以用户设定的字体大小及粗细显示，但是如果程序在运行时，用户切换到设置里修改了字体，这是在切回程序，字体并不会自动跟着变。这时就需要我们自己来更新一下控件的字体了。</p>
<p>在系统字体修改时，系统会给运行中的程序发送<code>UIContentSizeCategoryDidChangeNotification</code>通知，我们只需要监听这个通知，并重新设置一下字体即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[[NSNotificationCenter defaultCenter] addObserver:self</div><div class="line">    selector:@selector(preferredContentSizeChanged:)</div><div class="line">    name:UIContentSizeCategoryDidChangeNotification</div><div class="line">    object:nil];</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- (void)preferredContentSizeChanged:(NSNotification *)notification&#123;</div><div class="line">    self.textView.font = [UIFont preferredFontForTextStyle:UIFontTextStyleBody];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当然，有的时候要适应动态修改的字体并不是这么设置一下就完事了，控件的大小可能也需要进行相应的调整，这时我们程序中的控件大小也不应该写死，而是需要根据字体大小来计算.</p>
<p>##Letterpress effects</p>
<p>凸版印刷替效果是给文字加上奇妙阴影和高光，让文字看起有凹凸感，像是被压在屏幕上。当然这种看起来很高端大气上档次的效果实现起来确实相当的简单，只需要给<code>AttributedString</code>加一个<code>NSTextEffectAttributeName</code>属性，并指定该属性值为<code>NSTextEffectLetterpressStyle</code>就可以了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">NSDictionary *attributes = @&#123; </div><div class="line">    NSForegroundColorAttributeName: [UIColor redColor],</div><div class="line">    NSFontAttributeName: [UIFont preferredFontForTextStyle:UIFontTextStyleHeadline],</div><div class="line">    NSTextEffectAttributeName: NSTextEffectLetterpressStyle</div><div class="line">&#125;;</div><div class="line">self.titleLabel.attributedText = [[NSAttributedString alloc] initWithString:@&quot;Title&quot; attributes:attributes];</div></pre></td></tr></table></figure>
<p><img src="/image/text_kit_2_letterpress.png" alt="Letterpress"></p>
<p>在iOS7系统自带的<strong>备忘录</strong>应用中，苹果就使用了这种凸版印刷体效果。</p>
<p>##Exclusion paths</p>
<p>在排版中，图文混排是非常常见的需求，但有时候我们的图片并一定都是正常的矩形，这个时候我们如果需要将文本环绕在图片周围，就可以用路径排除（exclusion paths）了。</p>
<p>Explosion pats基本原理是将需要被文本留出来的形状的路径告诉文本控件的<code>NSTextContainer</code>对象，<code>NSTextContainer</code>在文字排版时就会避开该路径。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">UIBezierPath *floatingPath = [self pathOfImage];</div><div class="line">self.textView.textContainer.exclusionPaths = @[floatingPath];</div></pre></td></tr></table></figure>
<p><img src="/image/text_kit_2_exclusionpath.png" alt="Exclusion paths"></p>
<p>所以实现Exclusion paths的主要工作就是获取这个path。</p>
<p>##Dynamic text formatting and storage</p>
<p>好了，到现在我们知道了Text Kit可以动态的根据用户设置的字体大小进行调整，但是如果具体某个文本显示控件中的文本样式能够动态调整是不是会更酷一些呢？</p>
<p>例如，你希望让你的textView中的文本自动支持下面功能：</p>
<ul>
<li>让<code>**</code>字符之间的文本加粗显示</li>
<li>让<code>_</code>字符之间的文本以斜体字显示</li>
<li>让<code>~~</code>字符之间的文本以被横线穿透样式显示</li>
<li>让全大写的文本以红色字体显示</li>
</ul>
<p><img src="/image/text_kit_2_demo.png" alt="Text Formatting Demo"></p>
<p>实现这些才是真正体现Text Kit强大之处的时候，在此之前你需要理解Text Kit中的文本存储系统是怎么工作的，下图显示了Text Kit中文本的保存、渲染和现实之间的关系。</p>
<p><img src="/image/text_kit_2_TextKitStack.png" alt="Text Kit"></p>
<p>当你使用<code>UITextView</code>、<code>UILabel</code>、<code>UITextField</code>控件的时候，系统会自动创建上面这些类，你可以选择直接使用这么默认的实现或者为你的控件自定义这几个中的任何一个。</p>
<ul>
<li><code>NSTextStorage</code>本身继承与<code>NSMutableAttributedString</code>，它是以attributed string的形式保存需要渲染的文本，并在文本内容改变的时候通知到对应的layout manager对象。通常你需要创建<code>NSTextStorage</code>的子类来在文本改变时进行文本显示样式的更新。</li>
<li><code>NSLayoutManager</code>作为文本控件中的排版引擎接收保存的文本并在屏幕上渲染出来。</li>
<li><code>NSTextContainer</code>描述了文本在屏幕上显示时的几何区域，每个text container与一个具体的UITextView相关联。如果你需要定义一个很复杂形状的区域来显示文本，你可能需要创建<code>NSTextContainer</code>子类。</li>
</ul>
<p>要实现我们上面描述的动态文本格式化功能，我们需要创建<code>NSTextStorage</code>子类以便在用户输入文本的时候动态的增加文本属性。自定义了text storage后，我们需要替换调UITextView默认的text storage。</p>
<p>###创建NSTextStorage的子类</p>
<p>我们创建NSTextStorage子类，命名为<code>MarkupTextStorage</code>，在实现文件中添加一个成员变量：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">#import &quot;MarkupTextStorage.h&quot;</div><div class="line"></div><div class="line">@implementation MarkupTextStorage</div><div class="line">&#123;</div><div class="line">    NSMutableAttributedString *_backingStore;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (id)init</div><div class="line">&#123;</div><div class="line">    self = [super init];</div><div class="line">    if (self) &#123;</div><div class="line">        _backingStore = [[NSMutableAttributedString alloc] init];</div><div class="line">    &#125;</div><div class="line">    return self;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p><code>NSTextStorage</code>的子类需要重载一些方法提供<code>NSMutableAttributedString</code>类型的<code>backing store</code>信息，所以我们继续添加下面代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">- (NSString *)string</div><div class="line">&#123;</div><div class="line">    return [_backingStore string];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (NSDictionary *)attributesAtIndex:(NSUInteger)location effectiveRange:(NSRangePointer)range</div><div class="line">&#123;</div><div class="line">    return [_backingStore attributesAtIndex:location effectiveRange:range];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)replaceCharactersInRange:(NSRange)range withString:(NSString *)str</div><div class="line">&#123;</div><div class="line">    [self beginEditing];</div><div class="line">    [_backingStore replaceCharactersInRange:range withString:str];</div><div class="line">    [self edited:NSTextStorageEditedCharacters | NSTextStorageEditedAttributes</div><div class="line">           range:range changeInLength:str.length - range.length];</div><div class="line">    [self endEditing];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)setAttributes:(NSDictionary *)attrs range:(NSRange)range</div><div class="line">&#123;</div><div class="line">    [self beginEditing];</div><div class="line">    [_backingStore setAttributes:attrs range:range];</div><div class="line">    [self edited:NSTextStorageEditedAttributes</div><div class="line">           range:range changeInLength:0];</div><div class="line">    [self endEditing];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>后面两个方法都是代理到backing store，然后需要被<code>beginEditing</code> <code>edited</code> <code>endEditing</code>包围，而且必须在文本编辑时按顺序调用来通知text storage对应的layout manager。</p>
<p>你可能发现子类化<code>NSTextStorage</code>需要写不少的代码，因为<code>NSTextStorage</code>是一个类集群中的一个开发接口，不能只是继承它然后重载很少的方法来拓展它的功能，而是需要自己实现很多细节。</p>
<blockquote>
<p>类集群(Class cluster)是苹果Cocoa(Touch)框架中常用的设计模式之一。</p>
</blockquote>
<p>类集群是Objective-C中对抽象工厂模式的简单实现，为创建一些列相关或独立对象提供了统一的接口而不用指定具体的类。常用的像<code>NSArray</code>和<code>NSNumber</code>事实上也是一系列类集群的开放接口。</p>
<p>苹果使用类集群是为了将一些类具体类隐藏在开放的抽象父类之下，外面通过抽象父类的方法来创建私有子类的实例，并且外界也完全不知道工厂分配到了哪个私有类，因为它们始终只和开放接口交互。</p>
<p>使用类集群确实简化了接口，让类更容易被使用，但是要知道鱼和熊掌不可兼得，你又想简单又想可拓展性强，哪有那么好的事啊？所以创建一个类集群中的抽象父类就没有那么简单了。</p>
<p>好了，上面解释了这么多其实主要就说明了为什么子类化<code>NSTextStorage</code>需要写这么多代码，下面要在<code>UITextView</code>使用我们自定义的text storage了。</p>
<p>###设置UITextView</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">- (void)createMarkupTextView</div><div class="line">&#123;</div><div class="line">    NSDictionary *attributes = @&#123;NSFontAttributeName: [UIFont preferredFontForTextStyle:UIFontTextStyleBody]&#125;;</div><div class="line">    NSString *content = [NSString stringWithContentsOfFile:[[NSBundle mainBundle] pathForResource:@&quot;content&quot; ofType:@&quot;txt&quot;]</div><div class="line">                                                  encoding:NSUTF8StringEncoding</div><div class="line">                                                     error:nil];</div><div class="line">    NSAttributedString *attributedString = [[NSAttributedString alloc] initWithString:content</div><div class="line">                                                                           attributes:attributes];</div><div class="line">    _textStorage = [[MarkupTextStorage alloc] init];</div><div class="line">    [_textStorage setAttributedString:attributedString];</div><div class="line">    </div><div class="line">    CGRect textViewRect = CGRectMake(20, 60, 280, self.view.bounds.size.height - 100);</div><div class="line">    </div><div class="line">    NSLayoutManager *layoutManager = [[NSLayoutManager alloc] init];</div><div class="line">    </div><div class="line">    NSTextContainer *textContainer = [[NSTextContainer alloc] initWithSize:CGSizeMake(textViewRect.size.width, CGFLOAT_MAX)];</div><div class="line">    [layoutManager addTextContainer:textContainer];</div><div class="line">    [_textStorage addLayoutManager:layoutManager];</div><div class="line">    </div><div class="line">    _textView = [[UITextView alloc] initWithFrame:textViewRect</div><div class="line">                                    textContainer:textContainer];</div><div class="line">    _textView.delegate = self;</div><div class="line">    [self.view addSubview:_textView];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>很长的代码，下面我们来看看都做了些啥：</p>
<ol>
<li>创建了一个自定义的text storage对象，并通过attributed string保存了需要显示的内容；</li>
<li>创建了一个layout manager对象；</li>
<li>创建了一个text container对象并将它与layout manager关联，然后该text container再和text storage对象关联；</li>
<li>通过text container创建了一个text view并显示。</li>
</ol>
<p>你可以将代码和前面那对象间的关系图对应着理解一下。</p>
<p>###动态格式化</p>
<p>继续在<code>MarkupTextStorage.m</code>文件中添加如下方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- (void)processEditing</div><div class="line">&#123;</div><div class="line">    [self performReplacementsForRange:[self editedRange]];</div><div class="line">    [super processEditing];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>processEditing</code>在layout manager中文本修改时发送通知，它通常也是处理一些文本修改逻辑的好地方。</p>
<p>继续添加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (void)performReplacementsForRange:(NSRange)changedRange</div><div class="line">&#123;</div><div class="line">    NSRange extendedRange = NSUnionRange(changedRange, [[_backingStore string]</div><div class="line">                                                        lineRangeForRange:NSMakeRange(changedRange.location, 0)]);</div><div class="line">    extendedRange = NSUnionRange(changedRange, [[_backingStore string]</div><div class="line">                                                lineRangeForRange:NSMakeRange(NSMaxRange(changedRange), 0)]);</div><div class="line">    [self applyStylesToRange:extendedRange];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个方法用于扩大文本匹配的范围，因为<code>changedRange</code>只是标识出一个字符，<code>lineRangeForRange</code>会将范围扩大到当前的一整行。</p>
<p>下面就剩下匹配特定格式的文本来显示对应的样式了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line">- (NSDictionary*)createAttributesForFontStyle:(NSString*)style</div><div class="line">                                    withTrait:(uint32_t)trait &#123;</div><div class="line">    UIFontDescriptor *fontDescriptor = [UIFontDescriptor</div><div class="line">                                        preferredFontDescriptorWithTextStyle:UIFontTextStyleBody];</div><div class="line">    </div><div class="line">    UIFontDescriptor *descriptorWithTrait = [fontDescriptor</div><div class="line">                                             fontDescriptorWithSymbolicTraits:trait];</div><div class="line">    </div><div class="line">    UIFont* font =  [UIFont fontWithDescriptor:descriptorWithTrait size: 0.0];</div><div class="line">    return @&#123; NSFontAttributeName : font &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)createMarkupStyledPatterns </div><div class="line">&#123;</div><div class="line">    UIFontDescriptor *scriptFontDescriptor =</div><div class="line">    [UIFontDescriptor fontDescriptorWithFontAttributes:</div><div class="line">     @&#123;UIFontDescriptorFamilyAttribute: @&quot;Bradley Hand&quot;&#125;];</div><div class="line">    </div><div class="line">    // 1. base our script font on the preferred body font size</div><div class="line">    UIFontDescriptor* bodyFontDescriptor = [UIFontDescriptor</div><div class="line">                                            preferredFontDescriptorWithTextStyle:UIFontTextStyleBody];</div><div class="line">    NSNumber* bodyFontSize = bodyFontDescriptor.</div><div class="line">    fontAttributes[UIFontDescriptorSizeAttribute];</div><div class="line">    UIFont* scriptFont = [UIFont</div><div class="line">                          fontWithDescriptor:scriptFontDescriptor size:[bodyFontSize floatValue]];</div><div class="line">    </div><div class="line">    // 2. create the attributes</div><div class="line">    NSDictionary* boldAttributes = [self</div><div class="line">                                    createAttributesForFontStyle:UIFontTextStyleBody</div><div class="line">                                    withTrait:UIFontDescriptorTraitBold];</div><div class="line">    NSDictionary* italicAttributes = [self</div><div class="line">                                      createAttributesForFontStyle:UIFontTextStyleBody</div><div class="line">                                      withTrait:UIFontDescriptorTraitItalic];</div><div class="line">    NSDictionary* strikeThroughAttributes = @&#123; NSStrikethroughStyleAttributeName : @1,</div><div class="line">                                               NSForegroundColorAttributeName: [UIColor redColor]&#125;;</div><div class="line">    NSDictionary* scriptAttributes = @&#123; NSFontAttributeName : scriptFont,</div><div class="line">                                        NSForegroundColorAttributeName: [UIColor blueColor]</div><div class="line">                                        &#125;;</div><div class="line">    NSDictionary* redTextAttributes =</div><div class="line">    @&#123; NSForegroundColorAttributeName : [UIColor redColor]&#125;;</div><div class="line">    </div><div class="line">    _replacements = @&#123;</div><div class="line">                      @&quot;(\\*\\*\\w+(\\s\\w+)*\\*\\*)&quot; : boldAttributes,</div><div class="line">                      @&quot;(_\\w+(\\s\\w+)*_)&quot; : italicAttributes,</div><div class="line">                      @&quot;(~~\\w+(\\s\\w+)*~~)&quot; : strikeThroughAttributes,</div><div class="line">                      @&quot;(`\\w+(\\s\\w+)*`)&quot; : scriptAttributes,</div><div class="line">                      @&quot;\\s([A-Z]&#123;2,&#125;)\\s&quot; : redTextAttributes</div><div class="line">                      &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)applyStylesToRange:(NSRange)searchRange</div><div class="line">&#123;</div><div class="line">    NSDictionary* normalAttrs = @&#123;NSFontAttributeName:</div><div class="line">                                      [UIFont preferredFontForTextStyle:UIFontTextStyleBody]&#125;;</div><div class="line">    </div><div class="line">    // iterate over each replacement</div><div class="line">    for (NSString* key in _replacements) &#123;</div><div class="line">        NSRegularExpression *regex = [NSRegularExpression</div><div class="line">                                      regularExpressionWithPattern:key</div><div class="line">                                      options:0</div><div class="line">                                      error:nil];</div><div class="line">        </div><div class="line">        NSDictionary* attributes = _replacements[key];</div><div class="line">        </div><div class="line">        [regex enumerateMatchesInString:[_backingStore string]</div><div class="line">                                options:0</div><div class="line">                                  range:searchRange</div><div class="line">                             usingBlock:^(NSTextCheckingResult *match,</div><div class="line">                                          NSMatchingFlags flags,</div><div class="line">                                          BOOL *stop)&#123;</div><div class="line">                                 // apply the style</div><div class="line">                                 NSRange matchRange = [match rangeAtIndex:1];</div><div class="line">                                 [self addAttributes:attributes range:matchRange];</div><div class="line">                                 </div><div class="line">                                 // reset the style to the original</div><div class="line">                                 if (NSMaxRange(matchRange)+1 &lt; self.length) &#123;</div><div class="line">                                     [self addAttributes:normalAttrs</div><div class="line">                                                   range:NSMakeRange(NSMaxRange(matchRange)+1, 1)];</div><div class="line">                                 &#125;</div><div class="line">                             &#125;];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在text storage初始化方法中调用<code>createMarkupStyledPatterns</code>，通过正则表达式来给特定格式的字符串设定特定显示样式，形成一个对应的字典。然后在<code>applyStylesToRange:</code>中利用已定义好的样式字典来给匹配的文本端增加样式。</p>
<hr>
<p>到这里本篇文章的内容就结束了，其实前面三点都很简单，稍微过一下就能用。最后一个动态文本格式化内容稍微多一点，可以结合我的代码<a href="https://github.com/tracy-e/TextKitDemo" target="_blank" rel="external">TextKitDemo</a>来看。</p>
<p>参考链接：</p>
<ul>
<li><a href="http://www.raywenderlich.com/50151/text-kit-tutorial" target="_blank" rel="external">http://www.raywenderlich.com/50151/text-kit-tutorial</a></li>
<li><a href="https://developer.apple.com/library/ios/documentation/StringsTextFonts/Conceptual/TextAndWebiPhoneOS/Introduction/Introduction.html" target="_blank" rel="external">https://developer.apple.com/library/ios/documentation/StringsTextFonts/Conceptual/TextAndWebiPhoneOS/Introduction/Introduction.html</a></li>
<li><a href="http://adcdownload.apple.com/wwdc_2013/wwdc_2013_sample_code/ios_intrototextkit.zip" target="_blank" rel="external">http://adcdownload.apple.com/wwdc_2013/wwdc_2013_sample_code/ios_intrototextkit.zip</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/image/text_kit_2_architecture.png&quot; alt=&quot;Text Rendering Architecture&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在上一篇文章&lt;a href=&quot;http://esoftmobile.com/2013/10/17/text-kit入门/&quot;&gt;Text Kit入门&lt;/a&gt;中我们主要了解了什么是Text Kit及它的一些架构和基本特性，这篇文章中会涉及关于Text Kit的更多具体应用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Text Kit是建立在Core Text框架上的，我们知道CoreText.framework是一个庞大而复杂的框架，而Text Kit在继承了Core Text强大功能的同时给开发者提供了比较友好的面向对象的API。&lt;/p&gt;
&lt;p&gt;本文主要介绍Text Kit下面四个特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;动态字体（Dynamic type）&lt;/li&gt;
&lt;li&gt;凸版印刷体效果（Letterpress effects）&lt;/li&gt;
&lt;li&gt;路径排除（Exclusion paths）&lt;/li&gt;
&lt;li&gt;动态文本格式化和存储（Dynamic text formatting and storage）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://esoftmobile.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Text Kit入门</title>
    <link href="http://esoftmobile.com/2013/10/17/text-kit%E5%85%A5%E9%97%A8/"/>
    <id>http://esoftmobile.com/2013/10/17/text-kit入门/</id>
    <published>2013-10-17T06:59:13.000Z</published>
    <updated>2013-10-18T04:56:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>更详细的内容可以参考官方文档 <a href="https://developer.apple.com/library/ios/documentation/StringsTextFonts/Conceptual/TextAndWebiPhoneOS/Introduction/Introduction.html" target="_blank" rel="external">《Text Programming Guide for iOS》</a>。</p>
<blockquote>
<p>“Text Kit指的是UIKit框架中用于提供高质量排版服务的一些类和协议，它让程序能够存储，排版和显示文本信息，并支持排版所需要的所有特性，包括字距调整、连写、换行和对齐等。”</p>
</blockquote>
<p>以前，如果我们想实现复杂的文本排版，例如在textView中显示不同样式的文本，或者图片和文字混排，你可能就需要借助于<code>UIWebView</code>或者深入研究一下<code>Core Text</code>。在iOS6中，<code>UILabel</code>、<code>UITextField</code>、<code>UITextView</code>增加了一个<code>NSAttributedString</code>属性，可以稍微解决一些排版问题，但是支持的力度还不够。现在Text Kit完全改变了这种现状。</p>
<p><img src="/image/text_kit.png" alt="Text Kit"></p>
<a id="more"></a>
<p>Text Kit是基于Core Text构建的快速、先进的文本排版和渲染引擎，并且与<code>UIKit</code>很好的集合。<code>UITextView</code>，<code>UITextField</code>、<code>UILabel</code>都已经基于Text Kit重新构建，所以它们都支持分页文本、文本包装、富文本编辑、交互式文本着色、文本折叠和自定义截取等特性。所有这些UI控件现在都以同样的方式构建，在它们后面，一个<code>NSTextStorage</code>对象保存着文本的主要信息，它本身是<code>NSMutableAttributedString</code>的子类，支持分批编辑。这就意味着你可以改变一个范围内的字符的样式而不用整体替换文本内容。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[self.textView.textStorage beginEditing];</div><div class="line">[self markWord:@&quot;Alice&quot; inTextStorage:self.textView.textStorage];</div><div class="line">[self.textView.textStorage endEditing];</div></pre></td></tr></table></figure>
<p>Text storage管理者一系列的<code>NSLayoutManager</code>对象，当它的字符或者属性改变时会通知到自己所管理的layout Manager对象以便它们作出相应的反应。在layout manager上面是一个<code>NSTextContainer</code>对象，用于为layout manager定义坐标系和一些几何特性。例如，如果你想<code>UITextView</code>中的文本环绕在一张图片四周，你可以给text container设定一个排除路径(exclusion path)。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">UIBezierPath *exclusion = ButterflyBezierPath;</div><div class="line">self.textView.textContainer.exclusionPaths = @[exclusion];</div></pre></td></tr></table></figure>
<p><img src="/image/text_kit_exclusion_paths.png" alt="Exclusion Path"></p>
<p>Text container能够处理击中测试(hit tests)，所以可以定位到点击的字符在文本中的位置。此外它还提供一些代理方法让开发者能够自己定义链接点击后的处理事件。</p>
<p><img src="/image/text_kit_architecture.png" alt="TextKit"></p>
<p>通过基于Text Kit重新构建<code>UILabel</code>、<code>UITextField</code>和<code>UITextView</code>，苹果给开发者更大的灵活性和能力来设计富文本视图，同时简化了这些控件的使用，因为它们是以同样的方式设计的，所有这些好处都是站在巨人(Core Text)的肩上。通常更强大的功能和灵活性也就意味着需要更多的设置和管理，但是，如果你只是想显示一段简单的文本，你还是可以像以前一样使用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">self.textLabel.text = @&quot;Hello Text Kit&quot;;</div></pre></td></tr></table></figure>
<p>本文翻译自<a href="http://www.doubleencore.com/2013/09/text-kit-ios-7/" target="_blank" rel="external">《iOS 7: Text Kit》</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;更详细的内容可以参考官方文档 &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/StringsTextFonts/Conceptual/TextAndWebiPhoneOS/Introduction/Introduction.html&quot;&gt;《Text Programming Guide for iOS》&lt;/a&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Text Kit指的是UIKit框架中用于提供高质量排版服务的一些类和协议，它让程序能够存储，排版和显示文本信息，并支持排版所需要的所有特性，包括字距调整、连写、换行和对齐等。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以前，如果我们想实现复杂的文本排版，例如在textView中显示不同样式的文本，或者图片和文字混排，你可能就需要借助于&lt;code&gt;UIWebView&lt;/code&gt;或者深入研究一下&lt;code&gt;Core Text&lt;/code&gt;。在iOS6中，&lt;code&gt;UILabel&lt;/code&gt;、&lt;code&gt;UITextField&lt;/code&gt;、&lt;code&gt;UITextView&lt;/code&gt;增加了一个&lt;code&gt;NSAttributedString&lt;/code&gt;属性，可以稍微解决一些排版问题，但是支持的力度还不够。现在Text Kit完全改变了这种现状。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/image/text_kit.png&quot; alt=&quot;Text Kit&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://esoftmobile.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Xcode预置Sinppets知多少</title>
    <link href="http://esoftmobile.com/2013/09/06/xcode%E9%A2%84%E7%BD%AEsinppets%E7%9F%A5%E5%A4%9A%E5%B0%91/"/>
    <id>http://esoftmobile.com/2013/09/06/xcode预置sinppets知多少/</id>
    <published>2013-09-06T06:04:33.000Z</published>
    <updated>2013-09-17T12:15:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="http://nshipster.com" target="_blank" rel="external">NSHipster</a>本周的主题是<a href="http://nshipster.com/xcode-snippets/" target="_blank" rel="external">《Xcode Snippets》</a>，并将他们常用的Snippets放在了<a href="https://github.com/mattt/Xcode-Snippets" target="_blank" rel="external">GitHub</a>，又引来很多粉丝疯狂的Star，我也过去观望了一下，其实内容不多，而且也没有什么太多的亮点，我觉得只要你平时注意积累和整理自己的Snippets，效果一定比从别人那里Fork来用要好得多。什么？你还不知道Snippets是什么？那你弄清楚了再来看！</p>
<p>其实我平时也不太注意Sinppets的积累和整理，所以决定从现在起开始。在积累自己的Sinppets前，我先大致看了一下Xcode预置的Sinppets，发现不少我曾经千百次敲的代码Sinppets里面都有，所以觉得有比较写成文章记录一下。</p>
<h1 id="Sinppets"><a href="#Sinppets" class="headerlink" title="Sinppets"></a>Sinppets</h1><p>现在就按顺序将Xcode预置的Sinppets过一遍。</p>
<a id="more"></a>
<p>###C Block typedef</p>
<p>Shortcut: <code>typedefBlock</code></p>
<p>Code:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">typedef &lt;#return type#&gt;(^&lt;#block name#&gt;)(&lt;#arguments#&gt;);</div></pre></td></tr></table></figure>
<p>###C Inline Block as Variable</p>
<p>Shortcut: <code>inlineBlock</code></p>
<p>Code:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;#Return Type#&gt;(^&lt;#Block Name#&gt;)(&lt;#Parameter Types#&gt;) = ^(&lt;#Parameters#&gt;) &#123;</div><div class="line">    &lt;#Code#&gt;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>###C typedef</p>
<p>Shortcut: <code>typedef</code></p>
<p>Code:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">typedef &lt;#existing#&gt; &lt;#new#&gt;;</div></pre></td></tr></table></figure>
<p>###C++ Class Declaration</p>
<p>Shortcut: <code>classdef</code></p>
<p>Code:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">class &lt;#class name#&gt; &#123;</div><div class="line">  &lt;#instance variables#&gt;</div><div class="line"></div><div class="line">public:</div><div class="line">  &lt;#member functions#&gt;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>###C++ Class Template</p>
<p>Shortcut: <code>templateclass</code></p>
<p>Code:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">template &lt;&lt;#template parameters#&gt;&gt;</div><div class="line">class &lt;#class name#&gt; &#123;</div><div class="line">  &lt;#instance variables#&gt;</div><div class="line"></div><div class="line">public:</div><div class="line">  &lt;#member functions#&gt;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>###C++ Function Template</p>
<p>Shortcut: <code>templatefunction</code></p>
<p>Code: </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">template &lt;&lt;#template parameters#&gt;&gt;</div><div class="line">&lt;#return type#&gt; &lt;#function name#&gt;(&lt;#function parameters#&gt;) &#123;</div><div class="line">  &lt;#statements#&gt;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###C++ Namespace Definition</p>
<p>Shortcut: <code>namespace</code></p>
<p>Code:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">namespace &lt;#namespace name#&gt; &#123;</div><div class="line">  &lt;#declarations#&gt;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###C++ Try / Catch Block</p>
<p>Shortcut: <code>try</code></p>
<p>Code: </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">try &#123;</div><div class="line">  &lt;#statements#&gt;</div><div class="line">&#125; catch (&lt;#catch parameter#&gt;) &#123;</div><div class="line">  &lt;#statements#&gt;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###C++ Using Directive</p>
<p>Shortcut: <code>using namespace</code></p>
<p>Code:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">using namespace &lt;#namespace name#&gt;</div></pre></td></tr></table></figure>
<p>###Core Data Basic Fetch</p>
<p>Shortcut: </p>
<p>Code:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">NSFetchRequest *fetchRequest = [[NSFetchRequest alloc] init];</div><div class="line">NSEntityDescription *entity = [NSEntityDescription entityForName:@&quot;&lt;#Entity name#&gt;&quot; inManagedObjectContext:&lt;#context#&gt;];</div><div class="line">[fetchRequest setEntity:entity];</div><div class="line"></div><div class="line">NSError *error = nil;</div><div class="line">NSArray *fetchedObjects = [&lt;#context#&gt; executeFetchRequest:fetchRequest error:&amp;error];</div><div class="line">if (fetchedObjects == nil) &#123;</div><div class="line">    &lt;#Error handling code#&gt;</div><div class="line">&#125;</div><div class="line"></div><div class="line">[fetchRequest release];</div></pre></td></tr></table></figure>
<blockquote>
<p>比较奇怪的是所有Core Data相关的Snippets都没有提供Shortcut，有知道的朋友麻烦留言告诉我。</p>
</blockquote>
<p>###Core Data Fetch with a Predicate</p>
<p>Shortcut: </p>
<p>Code:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">NSFetchRequest *fetchRequest = [[NSFetchRequest alloc] init];</div><div class="line">NSEntityDescription *entity = [NSEntityDescription entityForName:@&quot;&lt;#Entity name#&gt;&quot; inManagedObjectContext:&lt;#context#&gt;];</div><div class="line">[fetchRequest setEntity:entity];</div><div class="line"></div><div class="line">NSPredicate *predicate = [NSPredicate predicateWithFormat:@&quot;&lt;#Predicate string#&gt;&quot;, &lt;#Predicate arguments#&gt;];</div><div class="line">[fetchRequest setPredicate:predicate];</div><div class="line"></div><div class="line">NSError *error = nil;</div><div class="line">NSArray *fetchedObjects = [&lt;#context#&gt; executeFetchRequest:fetchRequest error:&amp;error];</div><div class="line">if (fetchedObjects == nil) &#123;</div><div class="line">    &lt;#Error handling code#&gt;</div><div class="line">&#125;</div><div class="line"></div><div class="line">[fetchRequest release];</div></pre></td></tr></table></figure>
<p>###Core Data Fetch with Sorting</p>
<p>Shortcut:</p>
<p>Code:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">NSFetchRequest *fetchRequest = [[NSFetchRequest alloc] init];</div><div class="line">NSEntityDescription *entity = [NSEntityDescription entityForName:@&quot;&lt;#Entity name#&gt;&quot;</div><div class="line">inManagedObjectContext:&lt;#context#&gt;];</div><div class="line">[fetchRequest setEntity:entity];</div><div class="line"></div><div class="line">NSSortDescriptor *sortDescriptor = [[NSSortDescriptor alloc] initWithKey:@&quot;&lt;#Sort key#&gt;&quot;</div><div class="line">ascending:YES];</div><div class="line">NSArray *sortDescriptors = [[NSArray alloc] initWithObjects:sortDescriptor, nil];</div><div class="line">[fetchRequest setSortDescriptors:sortDescriptors];</div><div class="line"></div><div class="line">NSError *error = nil;</div><div class="line">NSArray *fetchedObjects = [&lt;#context#&gt; executeFetchRequest:fetchRequest error:&amp;error];</div><div class="line">if (fetchedObjects == nil) &#123;</div><div class="line">    // Handle the error</div><div class="line">&#125;</div><div class="line"></div><div class="line">[fetchRequest release];</div><div class="line">[sortDescriptor release];</div><div class="line">[sortDescriptors release];</div></pre></td></tr></table></figure>
<p>###Core Data Property Accessors</p>
<p>Shortcut:</p>
<p>Code:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">- (&lt;#Property type#&gt; *)&lt;#Property name#&gt;</div><div class="line">&#123;</div><div class="line">    [self willAccessValueForKey:@&quot;&lt;#Property name#&gt;&quot;];</div><div class="line">    &lt;#Property type#&gt; *tmpValue = [self primitiveValueForKey:@&quot;&lt;#Property name#&gt;&quot;];</div><div class="line">    [self didAccessValueForKey:@&quot;&lt;#Property name#&gt;&quot;];</div><div class="line">    return tmpValue;</div><div class="line">&#125;</div><div class="line">            </div><div class="line">- (void)set&lt;#Capitalized property name#&gt;:(&lt;#Property type#&gt; *)value</div><div class="line">&#123;</div><div class="line">    [self willChangeValueForKey:@&quot;&lt;#Property name#&gt;&quot;];</div><div class="line">    [self setPrimitiveValue:value forKey:@&quot;&lt;#Property name#&gt;&quot;];</div><div class="line">    [self didChangeValueForKey:@&quot;&lt;#Property name#&gt;&quot;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###Core Data Propery Validation</p>
<p>Shortcut:</p>
<p>Code:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- (BOOL)validate&lt;#Capitalized property name#&gt;:(id *)valueRef error:(NSError **)outError</div><div class="line">&#123;</div><div class="line">    BOOL validationResult = YES;</div><div class="line">    &lt;#Validation code#&gt;</div><div class="line">    return validationResult;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###Core Data Scalar Property Accessors</p>
<p>Shortcut:</p>
<p>Code: </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">- (&lt;#Property type#&gt;)&lt;#Property name#&gt;</div><div class="line">&#123;</div><div class="line">    [self willAccessValueForKey:@&quot;&lt;#Property name#&gt;&quot;];</div><div class="line">    &lt;#Property type#&gt; *tmpValue = &lt;#Property name#&gt;;</div><div class="line">    [self didAccessValueForKey:@&quot;&lt;#Property name#&gt;&quot;];</div><div class="line">    return tmpValue;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)set&lt;#Capitalized property name#&gt;:(&lt;#Property type#&gt;)value</div><div class="line">&#123;</div><div class="line">    [self willChangeValueForKey:@&quot;&lt;#Property name#&gt;&quot;];</div><div class="line">    &lt;#Property name#&gt; = value;</div><div class="line">    [self didChangeValueForKey:@&quot;&lt;#Property name#&gt;&quot;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###Core Data To-Many Relationship Accessors</p>
<p>Shortcut:</p>
<p>Code:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">- (void)add&lt;#Capitalized relationship name#&gt;Object:(&lt;#Relationship destination class#&gt; *)value</div><div class="line">&#123;    </div><div class="line">    NSSet *changedObjects = [[NSSet alloc] initWithObjects:&amp;value count:1];</div><div class="line">    [self willChangeValueForKey:@&quot;&lt;#Relationship name#&gt;&quot; withSetMutation:NSKeyValueUnionSetMutation usingObjects:changedObjects];</div><div class="line">    [[self primitiveValueForKey:@&quot;&lt;#Relationship name#&gt;&quot;] addObject:value];</div><div class="line">    [self didChangeValueForKey:@&quot;&lt;#Relationship name#&gt;&quot; withSetMutation:NSKeyValueUnionSetMutation usingObjects:changedObjects];</div><div class="line">    [changedObjects release];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)remove&lt;#Capitalized relationship name#&gt;Object:(&lt;#Relationship destination class#&gt; *)value</div><div class="line">&#123;</div><div class="line">    NSSet *changedObjects = [[NSSet alloc] initWithObjects:&amp;value count:1];</div><div class="line">    [self willChangeValueForKey:@&quot;&lt;#Relationship name#&gt;&quot; withSetMutation:NSKeyValueMinusSetMutation usingObjects:changedObjects];</div><div class="line">    [[self primitiveValueForKey:@&quot;&lt;#Relationship name#&gt;&quot;] removeObject:value];</div><div class="line">    [self didChangeValueForKey:@&quot;&lt;#Relationship name#&gt;&quot; withSetMutation:NSKeyValueMinusSetMutation usingObjects:changedObjects];</div><div class="line">    [changedObjects release];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)add&lt;#Capitalized relationship name#&gt;:(NSSet *)value</div><div class="line">&#123;    </div><div class="line">    [self willChangeValueForKey:@&quot;&lt;#Relationship name#&gt;&quot; withSetMutation:NSKeyValueUnionSetMutation usingObjects:value];</div><div class="line">    [[self primitiveValueForKey:@&quot;&lt;#Relationship name#&gt;&quot;] unionSet:value];</div><div class="line">    [self didChangeValueForKey:@&quot;&lt;#Relationship name#&gt;&quot; withSetMutation:NSKeyValueUnionSetMutation usingObjects:value];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)remove&lt;#Capitalized relationship name#&gt;:(NSSet *)value</div><div class="line">&#123;</div><div class="line">    [self willChangeValueForKey:@&quot;&lt;#Relationship name#&gt;&quot; withSetMutation:NSKeyValueMinusSetMutation usingObjects:value];</div><div class="line">    [[self primitiveValueForKey:@&quot;&lt;#Relationship name#&gt;&quot;] minusSet:value];</div><div class="line">    [self didChangeValueForKey:@&quot;&lt;#Relationship name#&gt;&quot; withSetMutation:NSKeyValueMinusSetMutation usingObjects:value];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###Do-While Statement</p>
<p>Shortcut: <code>dowhile</code></p>
<p>Code:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">do &#123;</div><div class="line">  &lt;#statements#&gt;</div><div class="line">&#125; while (&lt;#condition#&gt;);</div></pre></td></tr></table></figure>
<p>###Enumerate Index Set</p>
<p>Shortcut:</p>
<p>Code:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">NSUInteger index = [&lt;#index set#&gt; firstIndex];</div><div class="line"></div><div class="line">while (index != NSNotFound) &#123;</div><div class="line">    // Do something with index</div><div class="line">    index = [&lt;#index set#&gt;  indexGreaterThanIndex:index];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###Enumerate Index Set In Reverse</p>
<p>Shortcut: </p>
<p>Code:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">NSUInteger index = [&lt;#index set#&gt; lastIndex];</div><div class="line"></div><div class="line">while (index != NSNotFound) &#123;</div><div class="line">    // Do something with index.</div><div class="line">    index = [&lt;#index set#&gt; indexLessThanIndex:index];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>同样，已上两个也没有提供Shortcut。</p>
</blockquote>
<p>###Enumeration Declaration</p>
<p>Shortcut: <code>enumdef</code></p>
<p>Code:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">enum &lt;#enumeration name#&gt; &#123;</div><div class="line">  &lt;#enumerator1#&gt; = &lt;#value1#&gt;,</div><div class="line">  &lt;#enumerator2#&gt; = &lt;#value2#&gt;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>###For Statement</p>
<p>Shortcut: <code>for</code></p>
<p>Code:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for (&lt;#initialization#&gt;; &lt;#condition#&gt;; &lt;#increment#&gt;) &#123;</div><div class="line">  &lt;#statements#&gt;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###GCD: Dispatch After</p>
<p>Shortcut: <code>dispatch_after</code></p>
<p>Code:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">double delayInSeconds = 2.0;</div><div class="line">dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds * NSEC_PER_SEC));</div><div class="line">dispatch_after(popTime, dispatch_get_main_queue(), ^(void)&#123;</div><div class="line">    &lt;#code to be executed on the main queue after delay#&gt;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>###GCD: Dispatch Once</p>
<p>Shortcut: <code>dispatch_once</code></p>
<p>Code:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">static dispatch_once_t onceToken;</div><div class="line">dispatch_once(&amp;onceToken, ^&#123;</div><div class="line">    &lt;#code to be executed once#&gt;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>###If Statement</p>
<p>Shortcut: <code>if</code></p>
<p>Code:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">if (&lt;#condition#&gt;) &#123;</div><div class="line">  &lt;#statements#&gt;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###If-Else Statement</p>
<p>Shortcut: <code>ifelse</code></p>
<p>Code:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">if (&lt;#condition#&gt;) &#123;</div><div class="line">  &lt;#statements-if-true#&gt;</div><div class="line">&#125; else &#123;</div><div class="line">  &lt;#statements-if-false#&gt;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###Objective-C Autoreleasing Block</p>
<p>Shortcut: <code>@autoreleasepool</code></p>
<p>Code:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@autoreleasepool &#123;</div><div class="line">    &lt;#statements#&gt;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###Objective-C Catch Block</p>
<p>Shortcut: <code>@catch</code></p>
<p>Code: </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@catch (&lt;#exception#&gt;) &#123;</div><div class="line">    &lt;#handler#&gt;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###Objective-C Category</p>
<p>Shortcut: <code>@interface-category</code></p>
<p>Code:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@interface &lt;#class name#&gt; (&lt;#category name#&gt;)</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>###Objective-C Category Implementation</p>
<p>Shortcut: <code>@implementation-category</code></p>
<p>Code:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@implementation &lt;#class#&gt; (&lt;#category name#&gt;)</div><div class="line"></div><div class="line">&lt;#methods#&gt;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>###Objective-C Class Declaration</p>
<p>Shortcut: <code>@interface</code></p>
<p>Code:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@interface &lt;#class name#&gt; : &lt;#superclass#&gt;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>###Objective-C Class Extension</p>
<p>Shortcut: <code>@interface-extension</code></p>
<p>Code:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@interface &lt;#class name#&gt; ()</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>###Objective-C Class Implementation</p>
<p>Shortcut: <code>@implementation</code></p>
<p>Code:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@implementation &lt;#class#&gt;</div><div class="line"></div><div class="line">&lt;#methods#&gt;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>###Objective-C dealloc Method</p>
<p>Shortcut: <code>dealloc</code></p>
<p>Code:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (void)dealloc</div><div class="line">&#123;</div><div class="line">    &lt;#deallocations#&gt;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###Objective-C Fast Enumeration</p>
<p>Shortcut: <code>forin</code></p>
<p>Code: </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for (&lt;#type *object#&gt; in &lt;#collection#&gt;) &#123;</div><div class="line">    &lt;#statements#&gt;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###Objective-C Finally Block</p>
<p>Shortcut: <code>@finally</code></p>
<p>Code:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@finally &#123;</div><div class="line">    &lt;#handler#&gt;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###Objective-C init Method</p>
<p>Shortcut: <code>init</code></p>
<p>Code:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (id)init</div><div class="line">&#123;</div><div class="line">    self = [super init];</div><div class="line">    if (self) &#123;</div><div class="line">        &lt;#initializations#&gt;</div><div class="line">    &#125;</div><div class="line">    return self;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###Objective-C KVO: Observe Value For Keypath</p>
<p>Shortcut: <code>observeValueForKeyPath</code></p>
<p>Code:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context</div><div class="line">&#123;</div><div class="line">    if (context == &lt;#context#&gt;) &#123;</div><div class="line">        &lt;#code to be executed upon observing keypath#&gt;</div><div class="line">    &#125; else &#123;</div><div class="line">        [super observeValueForKeyPath:keyPath ofObject:object change:change context:context];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###Objective-C KVO: Values affecting Key</p>
<p>Shortcut: <code>keyPathsForValuesAffecting</code></p>
<p>Code: </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">+ (NSSet *)keyPathsForValuesAffecting&lt;#Dependent Key#&gt;</div><div class="line">&#123;</div><div class="line">    return [NSSet setWithObjects:@&quot;&lt;#key1#&gt;&quot;, nil];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###Objective-C Protocol Definition</p>
<p>Shortcut: <code>@protocol</code></p>
<p>Code:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@protocol &lt;#protocol name#&gt; &lt;NSObject&gt;</div><div class="line"></div><div class="line">&lt;#methods#&gt;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>###Objective-C Try / Catch Block</p>
<p>Shortcut: <code>@try</code></p>
<p>Code:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@try &#123;</div><div class="line">    &lt;#statements#&gt;</div><div class="line">&#125;</div><div class="line">@catch (NSException *exception) &#123;</div><div class="line">    &lt;#handler#&gt;</div><div class="line">&#125;</div><div class="line">@finally &#123;</div><div class="line">    &lt;#statements#&gt;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###Struct Declaration</p>
<p>Shortcut: <code>structdef</code></p>
<p>Code:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">struct &lt;#struct name#&gt; &#123;</div><div class="line">  &lt;#instance variables#&gt;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>###Switch Statement</p>
<p>Shortcut: <code>switch</code></p>
<p>Code:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">switch (&lt;#expression#&gt;) &#123;</div><div class="line">  case &lt;#constant#&gt;:</div><div class="line">    &lt;#statements#&gt;</div><div class="line">    break;</div><div class="line"></div><div class="line">  default:</div><div class="line">    break;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###Test Method</p>
<p>Shortcut: <code>test</code></p>
<p>Code:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- (void) test&lt;#Name#&gt; &#123;</div><div class="line">    &lt;#statements#&gt;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###Union Declaration</p>
<p>Shortcut: <code>uniondef</code></p>
<p>Code:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">union &lt;#union name#&gt; &#123;</div><div class="line">  &lt;#instance variables#&gt;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>###While Statement</p>
<p>Shortcut: <code>while</code></p>
<p>Code:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">while (&lt;#condition#&gt;) &#123;</div><div class="line">  &lt;#statements#&gt;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###Objective-C NSCoding initWithCoder Method</p>
<p>Shortcut: <code>initWithCoder</code></p>
<p>Code:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (id)initWithCoder:(NSCoder *)coder</div><div class="line">&#123;</div><div class="line">    self = [super initWithCoder:coder];</div><div class="line">    if (self) &#123;</div><div class="line">        &lt;#initializations#&gt;</div><div class="line">    &#125;</div><div class="line">    return self;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>###Objective-C NSView initWithFrame Method</p>
<p>Shortcut: <code>initWithFrame</code></p>
<p>Code:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (id)initWithFrame:(NSRect)frame</div><div class="line">&#123;</div><div class="line">    self = [super initWithFrame:frame];</div><div class="line">    if (self) &#123;</div><div class="line">        &lt;#initializations#&gt;</div><div class="line">    &#125;</div><div class="line">    return self;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>复制粘贴真累，上面贴出来这么长，其实很多根本就不用记，比如：<code>for</code>， <code>typedef</code>等，可以当成Xcode代码补齐功能 ， 但有的使用可能需要注意一些条件，如：<code>init</code>，<code>dealloc</code>，如果你习惯于一写方法就先写<code>-(id)</code>或<code>-(void)</code>，那么再打<code>init</code>，<code>dealloc</code>就千呼万唤使不出来了，我就躺枪了，你呢？ 还有像 <code>observeValueForKeyPath</code> 和 <code>keyPathsForValuesAffecting</code> 确实不知道，不知道有没有常用KVO的将这两个方法自己又加一遍Snippets？</p>
<p>当然Snippets在添加时可以设置如支持的平台（OS X or iOS），语言环境以及使用的位置（Completion Scopes）,用系统预置的Snippets就不用管那么多了，反正苹果会将这些设置为最合理的就是了，我们自己添加Snippets时就得多考虑一下这些设置的参数了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://nshipster.com&quot;&gt;NSHipster&lt;/a&gt;本周的主题是&lt;a href=&quot;http://nshipster.com/xcode-snippets/&quot;&gt;《Xcode Snippets》&lt;/a&gt;，并将他们常用的Snippets放在了&lt;a href=&quot;https://github.com/mattt/Xcode-Snippets&quot;&gt;GitHub&lt;/a&gt;，又引来很多粉丝疯狂的Star，我也过去观望了一下，其实内容不多，而且也没有什么太多的亮点，我觉得只要你平时注意积累和整理自己的Snippets，效果一定比从别人那里Fork来用要好得多。什么？你还不知道Snippets是什么？那你弄清楚了再来看！&lt;/p&gt;
&lt;p&gt;其实我平时也不太注意Sinppets的积累和整理，所以决定从现在起开始。在积累自己的Sinppets前，我先大致看了一下Xcode预置的Sinppets，发现不少我曾经千百次敲的代码Sinppets里面都有，所以觉得有比较写成文章记录一下。&lt;/p&gt;
&lt;h1 id=&quot;Sinppets&quot;&gt;&lt;a href=&quot;#Sinppets&quot; class=&quot;headerlink&quot; title=&quot;Sinppets&quot;&gt;&lt;/a&gt;Sinppets&lt;/h1&gt;&lt;p&gt;现在就按顺序将Xcode预置的Sinppets过一遍。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Objective-C" scheme="http://esoftmobile.com/tags/Objective-C/"/>
    
      <category term="Xcode" scheme="http://esoftmobile.com/tags/Xcode/"/>
    
      <category term="Sinppets" scheme="http://esoftmobile.com/tags/Sinppets/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C异步编程</title>
    <link href="http://esoftmobile.com/2013/08/28/objective-c%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
    <id>http://esoftmobile.com/2013/08/28/objective-c异步编程/</id>
    <published>2013-08-28T08:14:06.000Z</published>
    <updated>2013-08-29T05:37:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>好吧，我承认我标题党了，因为最近在看《JavaScript异步编程》，所以也想写点关于异步编程在Objective-C中的应用和实践中的一些原则。</p>
<h1 id="1-不要阻塞主线程"><a href="#1-不要阻塞主线程" class="headerlink" title="1. 不要阻塞主线程"></a>1. 不要阻塞主线程</h1><p>不管在进行iOS还是OS X开发中，主线程都只应该处理用户交互和界面布局，好的程序通常能够随时快速响应用户的操作，所以CPU密集型或者会阻塞线程的代码应该在其他位置去执行，我指的是其他线程。</p>
<a id="more"></a>
<h1 id="2-在后台线程中执行"><a href="#2-在后台线程中执行" class="headerlink" title="2. 在后台线程中执行"></a>2. 在后台线程中执行</h1><p>为了不阻塞主线程，我们应该把更多的操作放到后台中去执行，只有在不得不在主线程中执行时（更新UI等）才回到主线程，GCD是最适合这种线程之间切换的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//Main Thread</div><div class="line">dispatch_queue_t queue;</div><div class="line">queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);</div><div class="line">dispatch_async(queue, ^&#123;</div><div class="line">    [self renderThumbnails];</div><div class="line">    dispatch_async(dispatch_get_main_queue(), ^&#123;</div><div class="line">        [self.thumbnailView setNeedsDisplay:YES];</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h1 id="3-不要阻塞太多后台线程"><a href="#3-不要阻塞太多后台线程" class="headerlink" title="3. 不要阻塞太多后台线程"></a>3. 不要阻塞太多后台线程</h1><p>如果我们要在后台线程中请求一系列的数据，然后将它们显示到界面上，你可能写出下面的代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//Main Thread</div><div class="line">dispatch_queue_t queue;</div><div class="line">queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);</div><div class="line">for (NSURL *url in [self.imageStore URLs]) &#123;</div><div class="line">    dispatch_async(queue, ^&#123;</div><div class="line">        NSData *data = [NSData dataWithContentsOfURL:url];</div><div class="line">        </div><div class="line">        dispatch_async(dispatch_get_main_queue(), ^&#123;</div><div class="line">            [self.imageStore setImageData:data forURL:url];</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码肯定是有问题的，因为获取数据<code>NSData *data = [NSData dataWithContentsOfURL:url];</code>是同步的，台线程被这段代码阻塞调，系统会自动创建新的线程去执行下一个循环，最终结果会是获取多少次数据将创建了多少个后台线程。而创建线程本身是有成本的，所以如果创建太多的后台线程会占用大量的系统资源，这时应该用dispatch I/O来解决：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Main Thread</span></div><div class="line"><span class="keyword">for</span> (<span class="built_in">NSURL</span> *url <span class="keyword">in</span> [<span class="keyword">self</span>.imageStore URLs]) &#123;</div><div class="line">    dispatch_io_t io = dispatch_io_create_with_path(DISPATCH_IO_RANDOM, [[url path] fileSystemRepresentation], <span class="number">0</span>_RDONLY, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line">    dispatch_io_set_low_water(io, SIZE_MAX);</div><div class="line">    </div><div class="line">    dispatch_io_read(io, <span class="number">0</span>, SIZE_MAX, dispatch_get_main_queue(), ^(<span class="keyword">bool</span> done, dispatch_data_t data, <span class="keyword">int</span> error) &#123;</div><div class="line">        [<span class="keyword">self</span>.imageStore setImageData:data forURL:url];</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="4-与主循环-Main-Runloop-结合"><a href="#4-与主循环-Main-Runloop-结合" class="headerlink" title="4. 与主循环(Main Runloop)结合"></a>4. 与主循环(Main Runloop)结合</h1><p>通常我们一系列后台执行代码结束后，需要将结果反馈到主线程中，我们可以直接调用 <code>dispatch_get_main_queue()</code> 获取主线程，并在其中执行代码。</p>
<p>还有一些API是带有基于runloop的回调的，如NSTimer、一些<code>performSeletor:</code>方法和代理方法回调，所有这些API都会默认回调函数所在的runloop，所以在使用这些API时应该知道回调方法的runloop是属于哪个线程。还应该注意两点： </p>
<ul>
<li>不要在自动分配的工作线程中调用这些API</li>
<li>不要阻塞在main runloop中的回调函数</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)downloadFromRemotePictureViewer:(<span class="built_in">NSString</span> *)name &#123;</div><div class="line">    <span class="comment">//Main Thread</span></div><div class="line">    <span class="built_in">NSNetService</span> *service = [[<span class="built_in">NSNetService</span> alloc] initWithDomain:<span class="string">@""</span> type:<span class="string">@"_pictureviewer._tcp"</span> name:name];</div><div class="line">    [service setDelegate:<span class="keyword">self</span>];</div><div class="line">    [service resolveWithTimeout:<span class="number">5.0</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)netServiceDidResolveAddress:(<span class="built_in">NSNetService</span> *)service &#123;</div><div class="line">    [<span class="keyword">self</span> downloadFromRemoteService:service];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在上面初始化和发起NetService请求都应该在主线程执行，如果你通过GCD让它在后台运行，那么它的代码回调函数是永远也不会被调用，与此类似的还有NSURLConnection。代理方法也默认是在主线程中调用的，所以为了不阻主线程，我们应该将回调里面的处理放在后台：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- (void)netServiceDidResolveAddress:(NSNetService *)service &#123;</div><div class="line">    dispatch_async(self.downloadQueue, ^&#123;</div><div class="line">        [self downloadFromRemoteService:service];</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="5-为每个子系统对应一个队列"><a href="#5-为每个子系统对应一个队列" class="headerlink" title="5. 为每个子系统对应一个队列"></a>5. 为每个子系统对应一个队列</h1><p>通常我们应该将程序分割成多个独立的子系统，通过对应的调度队列来控制每个部分，界面部分由主队列（Main Queue）控制。</p>
<p>如我们一项任务需要涉及数据下载，数据存储，视图渲染和界面展现几个流程，我们可以分别创建<code>downloadQueue</code>，<code>storeQueue</code>， <code>renderQueue</code>，界面展现则只需要使用”main queue”。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">- (void)netServiceDidResolveAddress:(NSNetService *)service &#123;</div><div class="line">	dispatch_async(self.downloadQueue, ^&#123;</div><div class="line">	    NSData *data = [self downloadFromRemoteService:service];</div><div class="line">	    </div><div class="line">	    dispatch_async(self.storeQueue, ^&#123;</div><div class="line">	        int img = [self.imageStore addImage:data];</div><div class="line">	        </div><div class="line">	        dispatch_saync(self.renderQueue, ^&#123;</div><div class="line">	            [self renderThumbnail:img];</div><div class="line">	            </div><div class="line">	            dispatch_async(dispatch_get_main_queue(), ^&#123;</div><div class="line">	                [[self thumbnailViewForId:img] setNeedsDisplay:YES];</div><div class="line">	            &#125;);</div><div class="line">	        &#125;);</div><div class="line">	    &#125;);</div><div class="line">	&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="6-通过读写访问提升效率"><a href="#6-通过读写访问提升效率" class="headerlink" title="6. 通过读写访问提升效率"></a>6. 通过读写访问提升效率</h1><p>我们在设计读写时通常允许并发同步的的读(read)，串行异步的写(write)，并且读写不能同时进行。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">self.concurrentQuene = dispatch_queue_create(&quot;com.example.current&quot;, DISPATCH_QUEUE_CONCURRENT);</div><div class="line"></div><div class="line">- (id)objectAtIndex:(NSUInteger)index &#123;</div><div class="line">    __block id obj;</div><div class="line">    dispatch_sync(self.concurrentQueue, ^&#123;</div><div class="line">       obj = [self.array objectAtIndex:index];</div><div class="line">    &#125;);</div><div class="line">    return obj;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)insertObject:(id)obj atIndex:(NSUInteger)index &#123;</div><div class="line">    dispatch_barrier_async(self.concurrentQueue, ^&#123;</div><div class="line">        [self.array insertObject:obj atIndex:index];</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="7-区分控制和数据流"><a href="#7-区分控制和数据流" class="headerlink" title="7. 区分控制和数据流"></a>7. 区分控制和数据流</h1><p>调度队列(dispatch queue)并不是为一般的数据存储而设计的，它没有取消操作和随机存储，所以需要合理使用数据结构。</p>
<p>假设我们有一组图片需要渲染，如果我们每渲染一张图片时都去存储队列中读取对应的数据，那个渲染队列和存储队列就会因为依赖的大大降低执行效率。我们可以合理的利用数据结构，如我们可以每次从存储队列中取多个图片然后渲染，完后再去存储队列中取，这样就大大减少了依赖，而且也避免了频繁的队列切换。</p>
<h1 id="8-异步的更新状态"><a href="#8-异步的更新状态" class="headerlink" title="8. 异步的更新状态"></a>8. 异步的更新状态</h1><p>有时候我们先知道队列中操作执行的进度，并通过状态显示出来，如通过progress view显示当前图片渲染的进度，我们可以使用GCD的dispatch source。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//先设置接受到数据的处理（类似监听）</div><div class="line">self.source = dispatch_source_create(DISPATCH_SOURCE_TYPE_ADD, 0, 0, dispatch_get_main_queue());</div><div class="line"></div><div class="line">dispatch_source_set_event_handler(self.source, ^&#123;</div><div class="line">    self.progress += dispatch_source_get_data(self.source);</div><div class="line">    [self.progressView setProgress:(self.progress/self.total) animated:YES];</div><div class="line">&#125;);</div><div class="line">dispatch_resume(self.source);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//在渲染的时候将数据传递给dispatch source</div><div class="line">dispatch_async(self.renderQueue, ^&#123;</div><div class="line">    //...</div><div class="line">    dispatch_source_merge_data(self.source, 1);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//可以取消掉dispatch source的处理</div><div class="line">dispatch_source_cancel(self.source);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好吧，我承认我标题党了，因为最近在看《JavaScript异步编程》，所以也想写点关于异步编程在Objective-C中的应用和实践中的一些原则。&lt;/p&gt;
&lt;h1 id=&quot;1-不要阻塞主线程&quot;&gt;&lt;a href=&quot;#1-不要阻塞主线程&quot; class=&quot;headerlink&quot; title=&quot;1. 不要阻塞主线程&quot;&gt;&lt;/a&gt;1. 不要阻塞主线程&lt;/h1&gt;&lt;p&gt;不管在进行iOS还是OS X开发中，主线程都只应该处理用户交互和界面布局，好的程序通常能够随时快速响应用户的操作，所以CPU密集型或者会阻塞线程的代码应该在其他位置去执行，我指的是其他线程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Objective-C" scheme="http://esoftmobile.com/tags/Objective-C/"/>
    
  </entry>
  
</feed>
